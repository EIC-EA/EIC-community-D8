stages:
  - build
  - test
  - deploy

.deploy_job: &deploy_job
  image: intractosre/deploy:1
  stage: deploy
  before_script:
    - echo "$CI_COMMIT_BRANCH"
    - eval $(ssh-agent -s)
    - echo "$DEPLOYMENT_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa -p $SSH_PORT $HOST >> ~/.ssh/known_hosts
  script:
    - rsync -e "ssh -p $SSH_PORT" -avuz --no-perms --omit-dir-times --exclude-from=.rsyncignore --delete --delete-after $CI_PROJECT_DIR/ $PROJECT_USER@$HOST:$PROJECT_DIR
    - >
      ssh -p $SSH_PORT $PROJECT_USER@$HOST "source /.victhorious/conf/shell/envvars && cd $PROJECT_DIR &&
      ln -sf ../../lib/modules $PROJECT_DIR/web/modules/custom &&
      ln -sf ../../lib/themes $PROJECT_DIR/web/themes/custom &&
      ln -sf ../../lib/profiles $PROJECT_DIR/web/profiles/custom &&
      chown -R root:www-data $PROJECT_DIR &&
      ./vendor/bin/drush updb -y &&
      ./vendor/bin/drush cr &&
      ./vendor/bin/drush cim -y &&
      ./vendor/bin/drush pmu basic_auth -y &&
      ./vendor/bin/drush cr"

build_backend:
  stage: build
  image: intractosre/php:7.3
  artifacts:
    untracked: true
    expire_in: '1 day'
  script:
    # Current version of Gitlab (require > 14.2.0) doesn't support variable overrides using the 'rules' property
    # Dynamically define the --no-dev option once updated (e.g: added on develop and not other branches)
    - composer --no-ansi --no-interaction install --no-progress --prefer-dist --optimize-autoloader
    # Gitlab CI will exclude any directory containing a .git folder from artifacts, remove it temporarily
    - find $CI_PROJECT_DIR/web/modules/contrib -type d -name ".git" -exec rm -rf {} +
    - find $CI_PROJECT_DIR/vendor -type d -name ".git" -exec rm -rf {} +
  only:
    - /^release/.*$/
    - develop

build_front:
  stage: build
  image: node:14
  artifacts:
    untracked: true
    expire_in: '1 day'
  script:
    - cd lib/themes/eic_community
    - npm install && npm run build && npm run react-production
    - npm run pregenerate-storybook && npm run generate-storybook && npm run postgenerate-storybook
    - cd node_modules && find . -mindepth 1 -maxdepth 1 -type d ! -name "@ecl*" -exec rm -rf {} +
  only:
    - /^release/.*$/
#    - develop

security_check:
  stage: test
  image: jakzal/phpqa:php7.3
  script:
    - local-php-security-checker
  only:
    - develop

code_style_test:
  stage: test
  image: jakzal/phpqa:php7.3
  script:
    - ./vendor/bin/grumphp run --tasks=phpcs
  allow_failure: true
  only:
    - develop

phpmd_test:
  stage: test
  image: jakzal/phpqa:php7.3
  script:
    - ./vendor/bin/grumphp run --tasks=phpmd
  allow_failure: true
  only:
    - develop

phpstan_test:
  stage: test
  image: jakzal/phpqa:php7.3
  script:
    - phpstan
  allow_failure: true
  only:
    - develop

deploy_develop:
  <<: *deploy_job
  after_script:
    - 'eval "$DEPLOY_CURL_COMMAND"'
  stage: deploy
  variables:
    HOST: $DEVELOP_HOST
    DEPLOY_CURL_COMMAND_BODY: "'{\"text\": \"New deployment running on QA (url: $QA_HOST)\"}'"
    DEPLOY_CURL_COMMAND: 'curl -X POST -H "Content-Type: application/json" -H --data $DEPLOY_CURL_COMMAND_BODY $SLACK_URL'
  only:
    - develop

deploy_qa:
  <<: *deploy_job
  stage: deploy
  variables:
    HOST: $QA_HOST
  only:
    - /^release/.*$/

slack_notifier:
  stage: deploy
  script:
    - 'eval "$DEPLOY_CURL_COMMAND"'
  variables:
    DEPLOY_CURL_COMMAND_BODY: "'{\"text\": \"New deployment running on QA (url: $QA_HOST)\"}'"
    DEPLOY_CURL_COMMAND: 'curl -X POST -H "Content-Type: application/json" -H --data $DEPLOY_CURL_COMMAND_BODY $SLACK_URL'
  only:
    - /^release/.*$/
