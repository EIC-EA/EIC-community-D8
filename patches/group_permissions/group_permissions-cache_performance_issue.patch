diff --git a/group_permissions.module b/group_permissions.module
index 796bbc8..6c8e0a3 100644
--- a/group_permissions.module
+++ b/group_permissions.module
@@ -5,9 +5,17 @@
  * Hooks for handling group_permissions module features.
  */
 
-use Drupal\group_permissions\Entity\GroupPermission;
+use Drupal\group\Access\RefinableCalculatedGroupPermissions;
 use Drupal\group\Entity\GroupInterface;
 
+
+/**
+ * Implements hook_group_calculated_permissions_alter().
+ */
+function group_permissions_group_calculated_permissions_alter(RefinableCalculatedGroupPermissions $calculated_permissions, array $context) {
+  \Drupal::service('group_permission.group_permission_calculator')->doCalculation($calculated_permissions, $context['group'], $context['account']);
+}
+
 /**
  * Implements hook_entity_delete().
  */
diff --git a/group_permissions.services.yml b/group_permissions.services.yml
index 5feb845..22bbbf0 100644
--- a/group_permissions.services.yml
+++ b/group_permissions.services.yml
@@ -2,8 +2,6 @@ services:
   group_permission.group_permission_calculator:
     class: 'Drupal\group_permissions\Access\GroupPermissionCalculator'
     arguments: ['@entity_type.manager', '@group.membership_loader', '@group_permission.group_permissions_manager']
-    tags:
-      - { name: group_permission_calculator, priority: -110 }
 
   group_permission.group_permissions_manager:
     arguments: ['@cache.default', '@entity_type.manager', '@group_role.synchronizer']
diff --git a/src/Access/GroupPermissionCalculator.php b/src/Access/GroupPermissionCalculator.php
index cbb1074..a746981 100644
--- a/src/Access/GroupPermissionCalculator.php
+++ b/src/Access/GroupPermissionCalculator.php
@@ -4,10 +4,10 @@ namespace Drupal\group_permissions\Access;
 
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
-use Drupal\group\Access\GroupPermissionCalculatorBase;
 use Drupal\group\Access\RefinableCalculatedGroupPermissions;
 use Drupal\group\Access\CalculatedGroupPermissionsItem;
 use Drupal\group\Access\CalculatedGroupPermissionsItemInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupType;
 use Drupal\group\GroupMembershipLoaderInterface;
 use Drupal\group_permissions\GroupPermissionsManager;
@@ -15,7 +15,7 @@ use Drupal\group_permissions\GroupPermissionsManager;
 /**
  * Calculates group permissions for an account.
  */
-class GroupPermissionCalculator extends GroupPermissionCalculatorBase {
+class GroupPermissionCalculator {
 
   /**
    * The entity type manager.
@@ -54,22 +54,40 @@ class GroupPermissionCalculator extends GroupPermissionCalculatorBase {
     $this->groupPermissionsManager = $group_permissions_manager;
   }
 
+  /**
+   * Adds the calculated permissions for the given group and user.
+   *
+   * @param \Drupal\group\Access\CalculatedGroupPermissions $calculated_permissions
+   *   The calculated permissions.
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group entity.
+   * @param \Drupal\Core\Session\AccountInterface $account
+   *   The user account.
+   */
+  public function doCalculation(RefinableCalculatedGroupPermissions &$calculated_permissions, GroupInterface $group, AccountInterface $account) {
+    // Now add the new calculation.
+    if ($account->isAuthenticated()) {
+      $calculated_permissions->merge($this->calculateMemberPermissions($group, $account));
+      $calculated_permissions->merge($this->calculateOutsiderPermissions($group, $account));
+    }
+    else {
+      $calculated_permissions->merge($this->calculateAnonymousPermissions($group));
+    }
+
+    //@todo We should cache the result per request as this is called for each
+    // permission.
+  }
+
   /**
    * {@inheritdoc}
    */
-  public function calculateMemberPermissions(AccountInterface $account) {
+  public function calculateMemberPermissions(GroupInterface $group, AccountInterface $account) {
     $calculated_permissions = new RefinableCalculatedGroupPermissions();
-    $calculated_permissions->addCacheContexts(['user']);
-
-    $user = $this->entityTypeManager->getStorage('user')->load($account->id());
-    $calculated_permissions->addCacheableDependency($user);
 
-    foreach ($this->membershipLoader->loadByUser($account) as $group_membership) {
-      $group = $group_membership->getGroup();
+    if ($group_membership = $this->membershipLoader->load($group, $account)) {
       $custom_permissions = $this->groupPermissionsManager->getCustomPermissions($group);
 
       if (!empty($custom_permissions)) {
-        $calculated_permissions->addCacheableDependency($this->groupPermissionsManager->getGroupPermission($group));
         foreach ($group_membership->getRoles() as $group_role) {
           $item = new CalculatedGroupPermissionsItem(
             CalculatedGroupPermissionsItemInterface::SCOPE_GROUP,
@@ -78,10 +96,8 @@ class GroupPermissionCalculator extends GroupPermissionCalculatorBase {
           );
 
           $calculated_permissions->addItem($item);
-          $calculated_permissions->addCacheableDependency($group_role);
         }
 
-        $calculated_permissions->addCacheableDependency($group);
       }
     }
     return $calculated_permissions;
@@ -90,30 +106,20 @@ class GroupPermissionCalculator extends GroupPermissionCalculatorBase {
   /**
    * {@inheritdoc}
    */
-  public function calculateAnonymousPermissions() {
+  public function calculateAnonymousPermissions(GroupInterface $group) {
     $calculated_permissions = new RefinableCalculatedGroupPermissions();
 
-    $calculated_permissions->addCacheTags(['group_list']);
-
-    $group_permissions = $this->groupPermissionsManager->getAll();
-    foreach ($group_permissions as $group_permission) {
-      $group = $group_permission->getGroup();
-      if (!empty($group) && !empty($group_permission)) {
-        $calculated_permissions->addCacheableDependency($group_permission);
-
-        $custom_permissions = $group_permission->getPermissions();
-        $group_role = $group->getGroupType()->getAnonymousRole();
+    if ($group_permission = $this->groupPermissionsManager->getGroupPermission($group)) {
+      $custom_permissions = $group_permission->getPermissions();
+      $group_role = $group->getGroupType()->getAnonymousRole();
 
-        $item = new CalculatedGroupPermissionsItem(
-          CalculatedGroupPermissionsItemInterface::SCOPE_GROUP,
-          $group->id(),
-          $custom_permissions[$group_role->id()] ?? []
-        );
+      $item = new CalculatedGroupPermissionsItem(
+        CalculatedGroupPermissionsItemInterface::SCOPE_GROUP,
+        $group->id(),
+        $custom_permissions[$group_role->id()] ?? []
+      );
 
-        $calculated_permissions->addItem($item);
-        $calculated_permissions->addCacheableDependency($group);
-        $calculated_permissions->addCacheableDependency($group_role);
-      }
+      $calculated_permissions->addItem($item);
     }
 
     return $calculated_permissions;
@@ -122,38 +128,23 @@ class GroupPermissionCalculator extends GroupPermissionCalculatorBase {
   /**
    * {@inheritdoc}
    */
-  public function calculateOutsiderPermissions(AccountInterface $account) {
-
+  public function calculateOutsiderPermissions(GroupInterface $group, AccountInterface $account) {
     $calculated_permissions = new RefinableCalculatedGroupPermissions();
-    $calculated_permissions->addCacheTags(['group_list']);
-    $calculated_permissions->addCacheContexts(['user']);
-
-    $user = $this->entityTypeManager->getStorage('user')->load($account->id());
-    $calculated_permissions->addCacheableDependency($user);
 
-    $group_permissions = $this->groupPermissionsManager->getAll();
-    foreach ($group_permissions as $group_permission) {
-      if (!empty($group_permission)) {
-        $group = $group_permission->getGroup();
-        $calculated_permissions->addCacheableDependency($group_permission);
+    if ($group_permission = $this->groupPermissionsManager->getGroupPermission($group)) {
+      // Get all outsider roles.
+      $roles = $this->groupPermissionsManager->getOutsiderRoles($group, $account);
 
-        // Get all outsider roles.
-        $roles = $this->groupPermissionsManager->getOutsiderRoles($group, $account);
-        $calculated_permissions->addCacheableDependency($group_permission);
+      $custom_permissions = $group_permission->getPermissions();
 
-        $custom_permissions = $group_permission->getPermissions();
-
-        foreach ($roles as $group_role) {
-          $item = new CalculatedGroupPermissionsItem(
-            CalculatedGroupPermissionsItemInterface::SCOPE_GROUP,
-            $group->id(),
-            $custom_permissions[$group_role->id()] ?? [],
-          );
+      foreach ($roles as $group_role) {
+        $item = new CalculatedGroupPermissionsItem(
+          CalculatedGroupPermissionsItemInterface::SCOPE_GROUP,
+          $group->id(),
+          $custom_permissions[$group_role->id()] ?? [],
+        );
 
-          $calculated_permissions->addItem($item);
-          $calculated_permissions->addCacheableDependency($group);
-          $calculated_permissions->addCacheableDependency($group_role);
-        }
+        $calculated_permissions->addItem($item);
       }
     }
 
