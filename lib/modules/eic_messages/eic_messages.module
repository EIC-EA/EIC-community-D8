<?php

/**
 * @file
 * Primary module hooks for EIC Messages module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\eic_groups\EICGroupsHelper;
use Drupal\eic_messages\ActivityStreamOperationTypes;
use Drupal\eic_messages\Hooks\EntityOperations;
use Drupal\eic_messages\Hooks\FormOperations;
use Drupal\eic_messages\Hooks\LogMessageRenderer;
use Drupal\eic_messages\Hooks\MessageTokens;
use Drupal\eic_messages\Service\CommentMessageCreator;
use Drupal\eic_messages\Service\GroupContentMessageCreator;
use Drupal\eic_messages\Service\GroupMessageCreator;
use Drupal\eic_messages\Service\RequestMessageCreator;
use Drupal\eic_messages\Util\LogMessageTemplates;
use Drupal\eic_messages\Util\NotificationMessageTemplates;
use Drupal\flag\FlaggingInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\Entity\NodeType;
use Drupal\oec_group_flex\GroupVisibilityRecordInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_messages_group_insert(EntityInterface $entity) {
  /** @var Drupal\eic_messages\Service\GroupMessageCreator $class */
  $class = \Drupal::classResolver(GroupMessageCreator::class);
  $class->groupInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function eic_messages_group_update(EntityInterface $entity) {
  /** @var Drupal\eic_messages\Service\GroupMessageCreator $class */
  $class = \Drupal::classResolver(GroupMessageCreator::class);
  $class->groupUpdate($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function eic_messages_comment_insert(EntityInterface $entity) {
  /** @var \Drupal\eic_messages\Service\CommentMessageCreator $group_message_create */
  $group_message_create = \Drupal::classResolver(CommentMessageCreator::class);
  $group_message_create->createCommentActivity($entity, ActivityStreamOperationTypes::NEW_ENTITY);
  $group_message_create->createCommentTaggedUsersNotification($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function eic_messages_comment_update(EntityInterface $entity) {
  /** @var \Drupal\eic_messages\Service\CommentMessageCreator $group_message_create */
  $group_message_create = \Drupal::classResolver(CommentMessageCreator::class);
  $group_message_create->createCommentActivity(
    $entity,
    ActivityStreamOperationTypes::UPDATED_ENTITY
  );
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_messages_group_content_insert(EntityInterface $entity) {
  /** @var Drupal\eic_messages\Service\GroupContentMessageCreator $class */
  $class = \Drupal::classResolver(GroupContentMessageCreator::class);
  $class->groupContentInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_messages_message_insert(EntityInterface $entity) {
  $class = \Drupal::classResolver(LogMessageRenderer::class);
  $class->render($entity);
}

/**
 * Implements hook_entity_update().
 */
function eic_messages_entity_update(EntityInterface $entity) {
  /** @var Drupal\eic_messages\Hooks\EntityOperations $class */
  $class = \Drupal::classResolver(EntityOperations::class);
  $class->entityUpdate($entity);
}

/**
 * Implements hook_request_insert().
 */
function eic_messages_request_insert(
  FlaggingInterface $flag,
  ContentEntityInterface $entity,
  string $type
) {
  /** @var Drupal\eic_messages\Service\RequestMessageCreator $class */
  $class = \Drupal::classResolver(RequestMessageCreator::class);
  $class->requestInsert($flag, $entity, $type);
}

/**
 * Implements hook_request_close().
 */
function eic_messages_request_close(
  FlaggingInterface $flag,
  ContentEntityInterface $entity,
  string $type
) {
  /** @var Drupal\eic_messages\Service\RequestMessageCreator $class */
  $class = \Drupal::classResolver(RequestMessageCreator::class);
  $class->requestClose($flag, $entity, $type);
}

/**
 * Implements hook_request_timeout().
 */
function eic_messages_request_timeout(
  FlaggingInterface $flag,
  ContentEntityInterface $entity,
  string $type
) {
  /** @var Drupal\eic_messages\Service\RequestMessageCreator $class */
  $class = \Drupal::classResolver(RequestMessageCreator::class);
  $class->requestTimeout($flag, $entity, $type);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function eic_messages_entity_extra_field_info() {
  $extra = [];

  // We add the extra field for all content types. The display will be handled
  // in the hook_form_BASE_FORM_ID_alter() function.
  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->id()]['form']['field_post_activity'] = [
      'label' => t('Post message in the activity stream'),
      'description' => '',
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function eic_messages_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(FormOperations::class)
    ->formNodeFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_type_alter().
 */
function eic_messages_entity_type_alter(array &$entity_types) {
  $entity_types['message_template']->setHandlerClass('form', [
    'add' => 'Drupal\eic_messages\Form\MessageTemplateForm',
    'edit' => 'Drupal\eic_messages\Form\MessageTemplateForm',
    'delete' => 'Drupal\message\Form\MessageTemplateDeleteConfirm',
  ]);
}

/**
 * Implements hook_views_data_alter().
 */
function eic_messages_views_data_alter(array &$data) {
  $data['message']['message_template_type'] = [
    'title' => t('Message template type'),
    'filter' => [
      'title' => t('Message template type'),
      'help' => t('Select the message template types to filter.'),
      'field' => 'template',
      'id' => 'message_template_type',
    ],
  ];
}

/**
 * Implements hook_token_info_alter().
 */
function eic_messages_token_info_alter(&$info) {
  $class = \Drupal::classResolver(MessageTokens::class);
  return $class->tokenInfoAlter($info);
}

/**
 * Implements hook_tokens().
 */
function eic_messages_tokens(
  $type,
  $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleable_metadata
) {
  $class = \Drupal::classResolver(MessageTokens::class);
  return $class->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
}

/**
 * Implements hook_user_login().
 */
function eic_messages_user_login(UserInterface $account) {
  $moduleHandler = \Drupal::service('module_handler');

  // If masquerade module is enabled, we need to create a log message when a
  // user tries to masquerade as another user.
  if ($moduleHandler->moduleExists('masquerade')) {
    /** @var \Drupal\masquerade\Masquerade $masquerade */
    $masquerade = \Drupal::service('masquerade');

    if ($masquerade->isMasquerading()) {
      $session = \Drupal::service('session');
      $current_user = \Drupal::currentUser();

      // Check if user is masquerading as another account. Otherwise it means
      // the user is no longer masquerading.
      if ($current_user->id() !== $session->get('masquerading')) {
        $entity_type_manager = \Drupal::entityTypeManager();

        // Load previous user account and create log message.
        if (
          ($user = $entity_type_manager->getStorage('user')
            ->load($session->get('masquerading'))) &&
          $user instanceof UserInterface
        ) {
          $entity_type_manager->getStorage('message')
            ->create([
              'template' => LogMessageTemplates::MASQUERADE_USER,
              'field_related_user' => \Drupal::currentUser()->id(),
              'uid' => $user->id(),
            ])
            ->save();
        }
      }
    }
  }
}

/**
 * Implements hook_group_flex_visibility_save().
 */
function eic_messages_group_flex_visibility_save(
  GroupInterface $group,
  GroupVisibilityRecordInterface $old_group_visibility,
  GroupVisibilityRecordInterface $new_group_visibility
) {
  // Create Log message when group visibility was changed.
  if ($old_group_visibility->getType() !== $new_group_visibility->getType()) {
    $eicGroupsHelper = \Drupal::service('eic_groups.helper');
    $current_user = \Drupal::currentUser();

    $old_visibility_label = $eicGroupsHelper->getGroupFlexPluginTitle(
      'visibility',
      $old_group_visibility->getType(),
      'default',
      $group->bundle()
    );
    $new_visibility_label = $eicGroupsHelper->getGroupFlexPluginTitle(
      'visibility',
      $new_group_visibility->getType(),
      'default',
      $group->bundle()
    );

    $members = $group->getMembers([
      $group->bundle() . '-' . EICGroupsHelper::GROUP_TYPE_OWNER_ROLE,
      $group->bundle() . '-' . EICGroupsHelper::GROUP_TYPE_ADMINISTRATOR_ROLE,
    ]);
    // Prepare messages to GO/GA about the group state change.
    foreach ($members as $member) {
      \Drupal::service('eic_messages.message_bus')->dispatch([
        'template' => NotificationMessageTemplates::GROUP_VISIBILITY_CHANGE,
        'uid' => $member->getUser()->id(),
        'field_group_ref' => ['target_id' => $group->id()],
        'field_group_visibility' => $new_visibility_label,
        'field_event_executing_user' => ['target_id' => $current_user->id()],
      ]);
    }

    \Drupal::entityTypeManager()->getStorage('message')
      ->create([
        'template' => LogMessageTemplates::GROUP_VISIBILITY_CHANGE,
        'field_group_ref' => ['target_id' => $group->id()],
        'field_previous_group_visibility' => $old_visibility_label,
        'field_group_visibility' => $new_visibility_label,
        'uid' => $current_user->id(),
      ])
      ->save();
  }
}
