<?php

/**
 * @file
 * Primary module hooks for EIC Administration module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityFormInterface;

/**
 * Implements template_preprocess_views_view_field().
 */
function eic_admin_preprocess_views_view_field(&$vars) {
  if ($vars['view']->id() == 'closed_requests' && $vars['field']->options['id'] == 'flag_id') {
    // Users without the 'administer flags' permissions cannot see the flag
    // label, so we add it manually here.
    /** @var \Drupal\flag\FlaggingInterface $flagging */
    $flagging = $vars['row']->_entity;
    $flag_label = $flagging->getFlag()->label();
    $vars['output'] = $flag_label;
    $vars['field']->last_render = $flag_label;
  }

  if ($vars['view']->current_display === 'page_admin_groups') {
    $group = $vars['row']->_entity;

    if (!$group instanceof \Drupal\group\Entity\GroupInterface) {
      return;
    }

    $is_group_sensitive = \Drupal::service('eic_groups.helper')->isGroupSensitive($group);
    //We only alter on sensitive group which user has no permissions.
    if ($group->access('view') || !$is_group_sensitive) {
      return;
    }

    if ($vars['field']->field === 'label') {
      $vars['output'] = t('Access denied: sensitive group with no access.');
      $vars['field']->last_render = t('Access denied: sensitive group with no access.');
    } else {
      $vars['output'] = '';
      $vars['field']->last_render = '';
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function eic_admin_module_implements_alter(&$implementations, $hook) {
  if (\Drupal::service('module_handler')->moduleExists('oe_authentication')) {
    switch ($hook) {
      // OE Authentication module is removing some cancel methods.
      // Prevent this by removing this implementation.
      case 'user_cancel_methods_alter':
        unset($implementations['oe_authentication']);
        break;
    }
  }
}

/**
 * Implements hook_module_form_alter().
 */
function eic_admin_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityFormInterface) {
    return;
  }
  $entity = $form_object->getEntity();
  if ($entity->getEntityTypeId() == 'node') {
    $form['#attached']['library'][] = 'eic_admin/admin_ux';
  }
}
