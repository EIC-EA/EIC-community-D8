<?php

/**
 * @file
 * Primary module hooks for EIC Group Statistics module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\eic_group_statistics\GroupStatisticTypes;
use Drupal\eic_group_statistics\Hooks\EntityOperations;
use Drupal\group\Entity\GroupContent;
use Drupal\eic_group_statistics\GroupStatisticsSearchApiReindex;

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function eic_group_statistics_group_delete(EntityInterface $entity) {
  \Drupal::service('eic_group_statistics.storage')->deleteGroupStatistics($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_group_statistics_group_content_insert(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'group-group_membership':
    case 'group-group_node-discussion':
    case 'group-group_node-document':
    case 'group-group_node-event':
    case 'group-group_node-gallery':
    case 'group-group_node-wiki_page':
      \Drupal::classResolver(EntityOperations::class)
        ->groupContentInsert($entity);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function eic_group_statistics_group_content_delete(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'group-group_membership':
      \Drupal::classResolver(EntityOperations::class)
        ->groupContentDelete($entity);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function eic_group_statistics_node_delete(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'discussion':
    case 'document':
    case 'event':
    case 'gallery':
    case 'wiki_page':
      // We need to make sure the node belongs to a group content, otherwise we
      // don't need to update any group statistics.
      $group_contents = GroupContent::loadByEntity($entity);
      if (!$group_contents) {
        return;
      }

      $group_content = reset($group_contents);

      \Drupal::classResolver(EntityOperations::class)
        ->groupContentNodeDelete($entity, $group_content);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_group_statistics_comment_insert(EntityInterface $entity) {
  /** @var \Drupal\comment\CommentInterface $commented_entity */
  $commented_entity = $entity->getCommentedEntity();

  // If commented entity is unpublished, we do nothing.
  if (!$commented_entity->isPublished()) {
    return;
  }

  // We need to make sure the comment belongs to a group content, otherwise we
  // don't need to update any group statistics.
  $group_contents = GroupContent::loadByEntity($commented_entity);
  if (!$group_contents) {
    return;
  }

  $group_content = reset($group_contents);

  // Increments group comments statistic counter.
  \Drupal::service('eic_group_statistics.storage')->increment($group_content->getGroup(), GroupStatisticTypes::STAT_TYPE_COMMENTS);

  /** @var \Drupal\eic_group_statistics\GroupStatisticsSearchApiReindex $search_api_reindex */
  $search_api_reindex = \Drupal::service('eic_group_statistics.search_api.reindex');

  // Re-index group statistics.
  $search_api_reindex->reindexItem($group_content->getGroup(), GroupStatisticsSearchApiReindex::DATASOURCE_GROUP);
  $search_api_reindex->reindexItem($commented_entity, GroupStatisticsSearchApiReindex::DATASOURCE_NODE);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function eic_group_statistics_comment_delete(EntityInterface $entity) {
  /** @var \Drupal\comment\CommentInterface $commented_entity */
  $commented_entity = $entity->getCommentedEntity();

  // If commented entity is unpublished, we do nothing.
  if (!$commented_entity->isPublished()) {
    return;
  }

  // We need to make sure the comment belongs to a group content, otherwise we
  // don't need to update any group statistics.
  $group_contents = GroupContent::loadByEntity($commented_entity);
  if (!$group_contents) {
    return;
  }

  $group_content = reset($group_contents);

  // Decrements group comments statistic counter.
  \Drupal::service('eic_group_statistics.storage')->decrement($group_content->getGroup(), GroupStatisticTypes::STAT_TYPE_COMMENTS);

  /** @var \Drupal\eic_group_statistics\GroupStatisticsSearchApiReindex $search_api_reindex */
  $search_api_reindex = \Drupal::service('eic_group_statistics.search_api.reindex');

  // Re-index group statistics.
  $search_api_reindex->reindexItem($group_content->getGroup(), GroupStatisticsSearchApiReindex::DATASOURCE_GROUP);
  $search_api_reindex->reindexItem($commented_entity, GroupStatisticsSearchApiReindex::DATASOURCE_NODE);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function eic_group_statistics_node_update(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'discussion':
    case 'document':
    case 'event':
    case 'gallery':
    case 'wiki_page':
      // We need to make sure the node belongs to a group content, otherwise we
      // don't need to update any group statistics.
      $group_contents = GroupContent::loadByEntity($entity);
      if (!$group_contents) {
        return;
      }

      $group_content = reset($group_contents);

      \Drupal::classResolver(EntityOperations::class)
        ->groupContentNodeUpdate($entity, $group_content);
      break;

  }
}
