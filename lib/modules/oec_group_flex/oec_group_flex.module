<?php

/**
 * @file
 * Primary module hooks for OEC Group Flex module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Access\GroupAccessResult;
use Drupal\group\Entity\GroupInterface;
use Drupal\oec_group_flex\Entity\Form\GroupForm;
use Drupal\oec_group_flex\Plugin\GroupVisibilityOptionsInterface;

/**
 * Implements hook_entity_type_alter().
 *
 * This overrides the Group(Type) Form provided by the Group module.
 */
function oec_group_flex_entity_type_alter(array &$entity_types) {
  $groupHandlerClasses = $entity_types['group']->getHandlerClasses();
  $formHandlerClasses = $groupHandlerClasses['form'];
  $formHandlerClasses['add'] = GroupForm::class;
  $formHandlerClasses['edit'] = GroupForm::class;
  $entity_types['group']->setHandlerClass('form', $formHandlerClasses);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alters the step 2 form of a group creation and removes submit action from
 * declared by group_flex module. The submit will now be handled in the
 * OECGroupForm class.
 */
function oec_group_flex_form_group_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $wizard_id = 'group_creator';
  if ($form_state->get('group_wizard') && $form_state->get('group_wizard_id') === $wizard_id) {
    foreach ($form['actions']['submit']['#submit'] as $key => $value) {
      if ($value === '_group_flex_form_group_step2_form_submit') {
        unset($form['actions']['submit']['#submit'][$key]);
        break;
      }
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function oec_group_flex_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity instanceof GroupInterface) {
    /** @var \Drupal\group_flex\Plugin\GroupVisibilityManager $group_visibility_plugin_manager */
    $group_visibility_plugin_manager = \Drupal::service('plugin.manager.group_visibility');

    /** @var \Drupal\oec_group_flex\GroupVisibilityDatabaseStorageInterface $group_visibility_storage */
    $group_visibility_storage = \Drupal::service('oec_group_flex.group_visibility.storage');

    if ($group_visibility_record = $group_visibility_storage->load($entity->id())) {
      if ($group_visibility_record->getType() !== '') {

        // Allow access for user 1.
        if ((int) $account->id() === 1) {
          return GroupAccessResult::allowed()
            ->addCacheableDependency($account)
            ->addCacheableDependency($entity);
        }

        $admin_roles = \Drupal::configFactory()->get('oec_group_flex.settings')->get('oec_group_flex_admin_roles');
        // Check if user has access to view the group. The access should should
        // be allowed if the user is a super.
        foreach ($account->getRoles(TRUE) as $role) {
          if (in_array($role, $admin_roles)) {
            return GroupAccessResult::allowed()
              ->addCacheableDependency($account)
              ->addCacheableDependency($entity);
          }
        }

        $group_visibility_plugin = $group_visibility_plugin_manager->createInstance($group_visibility_record->getType());

        if ($group_visibility_plugin instanceof GroupVisibilityOptionsInterface) {
          return $group_visibility_plugin->groupAccess($entity, $operation, $account);
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function oec_group_flex_group_delete(EntityInterface $entity) {
  /** @var \Drupal\oec_group_flex\GroupVisibilityDatabaseStorageInterface $group_visibility_storage */
  $group_visibility_storage = \Drupal::service('oec_group_flex.group_visibility.storage');

  // Deletes the group visibility record entry from database.
  if ($group_visibility_record = $group_visibility_storage->load($entity->id())) {
    $group_visibility_storage->delete([$group_visibility_record]);
  }
}

/**
 * Implements hook_group_flex_group_joining_method_info_alter().
 */
function oec_group_flex_group_flex_group_joining_method_info_alter(array &$definitions) {
  // Remove the standard request method provided by group flex.
  if (isset($definitions['group_membership_request'])) {
    unset($definitions['group_membership_request']);
  }
  // Remove the standard join_button provided by group flex.
  if (isset($definitions['join_button'])) {
    unset($definitions['join_button']);
  }
}

/**
 * Implements hook_group_flex_group_visibility_info_alter().
 */
function oec_group_flex_group_flex_group_visibility_info_alter(array &$definitions) {
  // Overrides the standard public group visibility plugin class provided by
  // group flex.
  if (isset($definitions['public'])) {
    $definitions['public']['class'] = '\Drupal\oec_group_flex\Plugin\GroupVisibility\PublicVisibility';
  }
  // Overrides the standard private group visibility plugin class provided by
  // group flex.
  if (isset($definitions['private'])) {
    $definitions['private']['class'] = '\Drupal\oec_group_flex\Plugin\GroupVisibility\PrivateVisibility';
  }
}

/**
 * Implements hook_views_data().
 */
function oec_group_flex_views_data() {
  // @todo Check if possible to group all those fields into a specific section.
  $data['groups_field_data']['table']['group'] = t('Group');
  $data['groups_field_data']['group_visibility'] = [
    'title' => t('Visibility'),
    'help' => t('The visibility of the group.'),
    'field' => [
      'id' => 'group_visibility',
    ],
  ];
  $data['groups_field_data']['group_visibility_custom_restricted_email_domains'] = [
    'title' => t('Visibility Custom: Restricted email domains'),
    'help' => t('The chosen email domains for group Custom - Restricted email domains visibility.'),
    'field' => [
      'id' => 'group_visibility_custom_restricted_email_domains',
    ],
  ];
  $data['groups_field_data']['group_visibility_custom_restricted_users'] = [
    'title' => t('Visibility Custom: Restricted users'),
    'help' => t('The chosen email domains for group Custom - Restricted users visibility.'),
    'field' => [
      'id' => 'group_visibility_custom_restricted_users',
    ],
  ];
  return $data;
}
