<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_install.
 *
 * @param $is_syncing
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function eic_contact_install($is_syncing) {
  $contact_forms = Drupal::entityTypeManager()
    ->getStorage('contact_form')
    ->loadByProperties();

  /** @var \Drupal\contact\Entity\ContactForm $contact_form */
  foreach ($contact_forms as $contact_form) {
    if (!empty($contact_form->getRecipients())) {
      continue;
    }

    $contact_form->setRecipients([Drupal::config('system.site')->get('mail')]);
    $contact_form->save();
  }
}

/**
 * Implements hook_form_alter.
 *
 * @param $form
 * @param $form_state
 */
function eic_contact_form_alter(&$form, FormStateInterface &$form_state) {
  if ('contact-message-contact-form-form' !== $form['#id']) {
    return;
  }

  $form['copy']['#default_value'] = TRUE;
  $form['self_copy'] = [
    '#type' => 'checkbox',
    '#default_value' => TRUE,
  ];
  $form['self_copy'] = $form['copy'] + ['#weight' => 5];
  unset($form['copy']);
  $form['actions']['submit']['#submit'][] = '_eic_contact_alter_submit';
}

/**
 * Set values for the category's Contact form field.
 *
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _eic_contact_category_allowed_values() {
  $categories = Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties([
      'vid' => 'contact_category',
    ]);

  $values = [];

  foreach ($categories as $category) {
    $values[$category->id()] = $category->label();
  }

  return $values;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function eic_contact_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $field = $context['items']->getFieldDefinition();
  if ($field->getName() !== 'field_contact_message') {
    return;
  }

  $element['#allowed_formats'] = ['basic_text'];
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _eic_contact_alter_submit(
  array $form,
  FormStateInterface $form_state
) {
  $categories = $form_state->getValue('field_contact_category');

  if (empty($categories)) {
    return;
  }

  $category_id = reset($categories)['value'];
  $category = \Drupal\taxonomy\Entity\Term::load($category_id);

  if (!$category instanceof \Drupal\taxonomy\TermInterface) {
    \Drupal::logger('eic_contact')->error(
      t(
        'No term found with this id: @id',
        ['@id' => $category_id],
        ['context' => 'eic_contact']
      )
    );

    return;
  }

  /** @var \Drupal\contact\MessageForm $message_form */
  $message_form = $form_state->getFormObject();
  $current_user = clone \Drupal\user\Entity\User::load(
    \Drupal::currentUser()->id()
  );

  /** @var \Drupal\contact\MessageInterface $message */
  $message = $form_state->getFormObject()->getEntity();

  // Clone the sender, as we make changes to mail and name properties.
  $sender_cloned = clone $current_user;

  if ($sender_cloned->isAnonymous()) {
    // At this point, $sender contains an anonymous user, so we need to take
    // over the submitted form values.
    $sender_cloned->name = $message->getSenderName();
    $sender_cloned->mail = $message->getSenderMail();

    // For the email message, clarify that the sender name is not verified; it
    // could potentially clash with a username on this site.
    $sender_cloned->name = t('@name (not verified)', ['@name' => $message->getSenderName()]);
  }

  $email = $category->get('field_target_email')->value;

  $params = [
    'contact_message' => $message_form->getEntity(),
    'sender' => $sender_cloned,
    'recipients' => $email,
    'contact_form' => $message_form->getEntity()->getContactForm(),
  ];

  /** @var \Drupal\eic_messages\Service\MessageBus $bus */
  $bus = \Drupal::service('eic_messages.message_bus');

  $send_copy = $form_state->getValue('self_copy');

  if ($send_copy) {
    // Send a copy of the contact form to the current user.
    $message_entity = [
      'template' => 'notify_contact_global_copy',
      'field_sender_name' => $message->getSenderName(),
      'field_subject' => $form_state->getValue('subject')[0]['value'],
      'field_body' => $form_state->getValue('field_contact_message')[0],
      'uid' => ['target_id' => $current_user->id()]
    ];
  } else {
    // Send notification to the sender to confirm email has been sent.
    $message_entity = [
      'template' => 'notify_contact_global_confirm',
      'field_sender_name' => $message->getSenderName(),
      'field_subject' => $form_state->getValue('subject')[0]['value'],
      'uid' => ['target_id' => $sender_cloned->id()]
    ];
  }

  if ($message_entity && !$sender_cloned->isAnonymous()) {
    $message_entity['field_sender'] = ['target_id' => $sender_cloned->id()];
  }
  $bus->dispatch($message_entity);

  /** @var \Drupal\Core\Mail\MailManagerInterface $mail_manager */
  $mail_manager = Drupal::service('plugin.manager.mail');
  $mail_manager->mail(
    'contact',
    'page_mail',
    $email,
    Drupal::languageManager()->getDefaultLanguage()->getId(),
    $params,
    $current_user->getEmail()
  );

  Drupal::messenger()->addMessage(
    t('Message sent with success.', [], ['context' => 'eic_contact'])
  );
}
