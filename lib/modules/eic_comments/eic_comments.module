<?php

/**
 * @file
 * Main module file for EIC Comments module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\eic_comments\Hooks\EntityOperations;
use Drupal\node\NodeForm;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eic_comments_form_comment_node_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_comment_body = &$form['comment_body']['widget'];

  $form['comment_body']['#attributes']['class'][] = 'ecl-comment-form__textarea-wrapper';
  $form_comment_body[0]['#title_display'] = 'invisible';

  array_push($form_comment_body[0]['#attributes']['class'],
  'ecl-text-area',
  'ecl-comment-form__textarea',
  'ecl-comment-form-reply'
  );
  $form_comment_body['#after_build'][] = 'eic_comments_configure_comment_form';

  $form["actions"]["submit"]["#value"] = t('Publish');
}

/**
 * Callback function to hide text format information.
 */
function eic_comments_configure_comment_form($form) {
  $form[0]['format']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_entity_view().
 */
function eic_comments_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  switch ($entity->getEntityTypeId()) {
    case 'node':
      \Drupal::classResolver(EntityOperations::class)
        ->entityView($build, $entity, $display, $view_mode);
      break;

  }
}

/**
 * Implements hook_entity_view().
 */
function eic_comments_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  // If we are not in a node form, we do nothing.
  if (!$form_object instanceof NodeForm) {
    return;
  }

  $entity = $form_object->getEntity();

  if (!$entity instanceof NodeInterface) {
    return;
  }

  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $entity->bundle());

  // We allow the user who is creating the node to be able to manage comment
  // settings. For existing nodes we only allow owners to manage comment
  // settings.
  foreach ($field_definitions as $field_definition) {
    if ($field_definition->getType() !== 'comment') {
      continue;
    }

    if (!isset($form[$field_definition->getName()])) {
      continue;
    }

    if (!isset($form[$field_definition->getName()]['#access'])) {
      continue;
    }

    // If the node is new, the user can manage comment settings.
    if ($entity->isNew()) {
      $form[$field_definition->getName()]['#access'] = TRUE;
      continue;
    }

    $current_user = \Drupal::currentUser();

    // If the node already exists, the owner can manage the comment settings.
    if (!$entity->isNew() && $entity->getOwnerId() === $current_user->id()) {
      $form[$field_definition->getName()]['#access'] = TRUE;
    }
  }
}
