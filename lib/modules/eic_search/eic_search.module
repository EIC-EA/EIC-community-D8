<?php

/**
 * @file
 * Primary module hooks for EIC Search module.
 */

use Drupal\eic_groups\Constants\GroupVisibilityType;

/**
 * Implements hook_theme().
 */
function eic_search_theme($existing, $type, $theme, $path) {
  return [
    'search_overview_block' => [
      'variables' => [
        'url' => '',
        'blockId' => 0,
        'datasource' => '',
        'isAnonymous' => TRUE,
        'translations' => [],
        'facets' => [],
        'sorts' => [],
        'page_options' => '',
        'enable_search' => TRUE,
        'source_class' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html
 */
function eic_search_preprocess_html(&$variables) {
  /** @var \Drupal\eic_search\Collector\SourcesCollector $sources_provider */
  $sources_provider = \Drupal::service('eic_search.sources_collector');
  $sources = $sources_provider->getSources();

  /** @var \Drupal\eic_search\Search\Sources\SourceTypeInterface $source */
  foreach ($sources as $source) {
    foreach ($source->getAvailableSortOptions() as $sort_option => $label) {
      $variables['#attached']['drupalSettings']['translations']['sources']['sort'][$sort_option . '__ASC'] = t($sort_option . ' ASC', [], ['context' => 'eic_search']);
      $variables['#attached']['drupalSettings']['translations']['sources']['sort'][$sort_option . '__DESC'] = t($sort_option . ' DESC', [], ['context' => 'eic_search']);
    }
    foreach ($source->getAvailableFacets() as $facet_option => $label) {
      $variables['#attached']['drupalSettings']['translations']['sources']['facet'][$facet_option] = $label;
    }
  }
}

/**
 * @implements hook_search_api_solr_documents_alter
 *
 * Solr needs to be aware of all group permissions so we can filter it in our querybuilder depending of the user context
 */
function eic_search_search_api_solr_documents_alter(array &$documents, \Drupal\search_api\IndexInterface $index, array $items) {
  /** @var \Drupal\eic_groups\EICGroupsHelper $group_helper */
  $group_helper = \Drupal::service('eic_groups.helper');

  /** @var \Solarium\QueryType\Update\Query\Document $document */
  foreach ($documents as $document) {
    $fields = $document->getFields();

    $search_id = array_key_exists('ss_search_api_id', $fields) ?
      $fields['ss_search_api_id'] :
      NULL;

    // By default we will add the visibility to "public" to every entity.
    // Even if it's not linked to group but we need to put it public
    // otherwise solr will not be able to reach content without this property.
    $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_PUBLIC;

    if (!$search_id) {
      $document->addField('ss_group_visibility', $group_visibility);
      continue;
    }

    /** @var \Drupal\search_api\Item\Item $item */
    $item = array_key_exists($search_id, $items) ? $items[$search_id] : NULL;

    if (!$item) {
      $document->addField('ss_group_visibility', $group_visibility);
      continue;
    }

    $group = $group_helper->getGroupByEntity($item->getOriginalObject()->getEntity());

    if (!$group) {
      $document->addField('ss_group_visibility', $group_visibility);
      continue;
    }

    /** @var \Drupal\oec_group_flex\GroupVisibilityDatabaseStorage $group_visibility_storage */
    $group_visibility_storage = \Drupal::service('oec_group_flex.group_visibility.storage');
    $group_visibility_entity = $group_visibility_storage->load($group->id());

    switch ($group_visibility_entity->getType()) {
      case GroupVisibilityType::GROUP_VISIBILITY_PRIVATE:
      case GroupVisibilityType::GROUP_VISIBILITY_COMMUNITY:
        $group_visibility = $group_visibility_entity->getType();
        break;

      // In this case, when we have a custom restriction, we can have multiple restriction options like email domain, trusted users, organisation, ...
      case GroupVisibilityType::GROUP_VISIBILITY_CUSTOM_RESTRICTED:
        $options = $group_visibility_entity->getOptions();
        foreach ($options as $key => $option) {
          // restricted_email_domains_status can be false so we need to check if enable
          if (GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN === $key && $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN . '_status']) {
            $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN;

            // When it's a email domain restriction we need to add a new value to solr document so we can filter on that
            $document->addField(
              'ss_' . GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN,
              $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN . '_conf']
            );
          }

          // @TODO need the trusted users working on group entity before
          if (GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS === $key && $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS . '_status']) {
            $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS;

            $user_ids = $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS . '_conf'];
            $users = array_map(function($user_id) {
              $user = \Drupal\user\Entity\User::load(reset($user_id));
              if (!$user) {
                return -1;
              }

              return $user->id() . '|' . $user->getAccountName();
            }, $user_ids);

            $document->addField('ss_' . GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS, implode(',', $users));
          }
        }
        break;
    }

    /** @var \Drupal\Core\Session\AccountInterface $owner */
    $owner = $group->getOwner();

    $user = \Drupal\user\Entity\User::load($owner->id());
    $document->addField('ss_group_visibility', $group_visibility);
    $document->addField('ss_group_url', $group->toUrl()->toString());
    $document->addField('ss_group_user_url', $user->toUrl()->toString());
    $document->addField('ss_group_user_fullname', $user->get('field_last_name')->value . ' ' . $user->get('field_first_name')->value);
  }
}
