<?php

/**
 * @file
 * Primary module hooks for EIC Search module.
 */

use \Drupal\eic_search\Plugin\search_api\processor\GroupAccessContent;
use \Solarium\Core\Query\QueryInterface as SolrQueryInterface;
use Solarium\QueryType\Select\Query\Query as SolrQuery;
use Drupal\search_api\Query\QueryInterface;

/**
 * Implements hook_theme().
 */
function eic_search_theme($existing, $type, $theme, $path) {
  return [
    'search_overview_block' => [
      'variables' => [
        'url' => '',
        'blockId' => 0,
        'datasource' => '',
        'bundle' => '',
        'layout' => '',
        'isAnonymous' => TRUE,
        'translations' => [],
        'facets' => [],
        'sorts' => [],
        'prefilters' => [],
        'page_options' => '',
        'currentGroup' => '',
        'currentGroupUrl' => '',
        'isGroupOwner' => FALSE,
        'enable_search' => TRUE,
        'enable_date_filter' => FALSE,
        'source_class' => '',
        'search_string' => '',
        'enable_facet_interests' => FALSE,
        'enable_facet_my_groups' => FALSE,
        'allow_pagination' => FALSE,
        'load_more_number' => FALSE,
        'is_route_group_search_results' => FALSE,
        'enable_invite_user_action' => FALSE,
        'invite_user_url' => '',
        'manager_roles' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html
 */
function eic_search_preprocess_html(&$variables) {
  /** @var \Drupal\eic_search\Collector\SourcesCollector $sources_provider */
  $sources_provider = \Drupal::service('eic_search.sources_collector');
  $sources = $sources_provider->getSources();

  /** @var \Drupal\eic_search\Search\Sources\SourceTypeInterface $source */
  foreach ($sources as $source) {
    foreach ($source->getAvailableSortOptions() as $sort_key => $options) {
      foreach ($options as $direction => $label) {
        $variables['#attached']['drupalSettings']['translations']['sources'][$source->getEntityBundle()]['sort'][$sort_key . '__' . $direction] = $label;
      }
    }
    foreach ($source->getAvailableFacets() as $facet_option => $label) {
      $variables['#attached']['drupalSettings']['translations']['sources'][$source->getEntityBundle()]['facet'][$facet_option] = $label;
    }
  }
}

/**
 * Implements hook_search_api_solr_documents_alter
 *
 * Solr needs to be aware of all group permissions so we can filter it in our
 *   query builder depending of the user context
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityMalformedException
 * @throws \Drupal\search_api\SearchApiException
 */
function eic_search_search_api_solr_documents_alter(
  array &$documents,
  \Drupal\search_api\IndexInterface $index,
  array $items
) {
  /** @var \Drupal\eic_groups\EICGroupsHelper $group_helper */
  $group_helper = \Drupal::service('eic_groups.helper');
  /** @var \Drupal\eic_search\Service\SolrDocumentProcessor $solr_document_processor */
  $solr_document_processor = \Drupal::service('eic_search.solr_document_processor');
  /** @var \Drupal\eic_search\Collector\DocumentProcessorCollector $document_precessor_provider */
  $document_precessor_provider = \Drupal::service('eic_search.document_processor_collector');
  $processors = $document_precessor_provider->getProcessors();

  /** @var \Solarium\QueryType\Update\Query\Document $document */
  foreach ($documents as $document) {
    $fields = $document->getFields();
    /** @var \Drupal\eic_search\Search\DocumentProcessor\DocumentProcessorInterface $processor */
    foreach ($processors as $processor) {
      if ($processor->supports($fields)) {
        $processor->process($document, $fields, $items);
      }
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter.
 *
 * Override the select query of solr_search_api to add the custom processor.
 * We need this hook because search_api_solr isn't adapted for Processor
 * of search_api.
 */
function eic_search_search_api_solr_query_alter(SolrQueryInterface $solarium_query, QueryInterface $query) {
  $index_storage = \Drupal::entityTypeManager()
    ->getStorage('search_api_index');

  /** @var \Drupal\search_api\IndexInterface $index */
  $index = $index_storage->load('global');

  if (!$index instanceof \Drupal\search_api\IndexInterface) {
    return;
  }

  if (
    $index->isValidProcessor('group_content_access') &&
    GroupAccessContent::supportsIndex($index) &&
    $solarium_query instanceof SolrQuery
  ) {
    $index->getProcessor('group_content_access')
      ->preprocessSolrSearchQuery($solarium_query);
  }
}
