<?php

/**
 * @file
 * Main module file for EIC Flags module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\eic_flags\Form\RequestCloseForm;
use Drupal\eic_flags\Form\RequestDeleteForm;
use Drupal\eic_flags\RequestStatus;
use Drupal\eic_flags\RequestTypes;
use Drupal\eic_flags\Service\HandlerInterface;

/**
 * Implements hook_theme().
 */
function eic_flags_theme() {
  return [
    'eic_flag_count' => [
      'variables' => [
        'attributes' => [],
        'title' => NULL,
        'action' => 'flag',
        'flag' => NULL,
        'flaggable' => NULL,
      ],
    ],
    'eic_flag_count_text' => [
      'variables' => [
        'title' => NULL,
        'flag_count' => NULL,
        'flag_id' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function eic_flags_cron() {
  $queue = \Drupal::service('queue')->get('eic_flags_notify_queue');
  $five_minutes_ago = strtotime('-5 minutes');
  $ten_minutes_ago = strtotime('-10 minutes');
  $database = \Drupal::database();
  $query = $database->select('flagging', 'f');
  $query->condition('f.created', $five_minutes_ago, '>');
  $query->condition('f.created', $ten_minutes_ago, '<');
  $query->fields('f', ['flag_id', 'entity_type', 'entity_id']);
  $query->distinct(TRUE);
  $result = $query->execute()->fetchAll();
  foreach ($result as $row) {
    $row = (array) $row;
    $queue->createItem($row);
  }
}

/**
 * Returns an array of allowed values for field 'field_request_status'
 */
function eic_flags_field_request_status_allowed_values() {
  return [
    RequestStatus::ACCEPTED => t('Accepted'),
    RequestStatus::ARCHIVED => t('Archived'),
    RequestStatus::DENIED => t('Denied'),
    RequestStatus::OPEN => t('Open'),
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function eic_flags_entity_type_build(array &$entity_types) {
  /** @var \Drupal\eic_flags\Service\HandlerInterface $delete_request_handler */
  $delete_request_handler = \Drupal::service('eic_flags.handler_collector')
    ->getHandlerByType(RequestTypes::DELETE);

  foreach (array_keys($delete_request_handler->getSupportedEntityTypes()) as $entity_id) {
    if (!isset($entity_types[$entity_id])) {
      continue;
    }

    $entity_types[$entity_id]
      ->setFormClass('request-delete', RequestDeleteForm::class)
      ->setFormClass('close-request', RequestCloseForm::class)
      ->setLinkTemplate('request-delete-form', '/{entity_type}/{entity_id}/request-delete')
      ->setLinkTemplate('close-request', '/admin/community/{entity_type}/{entity_id}/request/{request_type}/close');
  }
}

/**
 * Implements hook_entity_operation().
 */
function eic_flags_entity_operation(EntityInterface $entity) {
  /** @var \Drupal\eic_flags\Service\HandlerInterface $delete_request_handler */
  $delete_request_handler = \Drupal::service('eic_flags.handler_collector')
    ->getHandlerByType(RequestTypes::DELETE);

  if (!$entity instanceof ContentEntityInterface
    || !$delete_request_handler->supports($entity)
  ) {
    return [];
  }

  $operations = [];
  $route_name = \Drupal::routeMatch()->getRouteName();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin && 'eic_flags.flagged_entities.list' === $route_name) {
    // TODO implement a more generic approach for available statuses and generate this dynamically
    return [
      'deny_request' => [
        'title' => t('Deny'),
        'url' => $entity->toUrl('close-request')
          ->setRouteParameter('request_type', RequestTypes::DELETE)
          ->setRouteParameter('response', RequestStatus::DENIED)
          ->setRouteParameter('destination', \Drupal::request()
            ->getRequestUri()),
      ],
      'accept_request' => [
        'title' => t('Accept'),
        'url' => $entity->toUrl('close-request')
          ->setRouteParameter('request_type', RequestTypes::DELETE)
          ->setRouteParameter('response', RequestStatus::ACCEPTED)
          ->setRouteParameter('destination', \Drupal::request()
            ->getRequestUri()),
      ],
    ];
  }

  if (!$entity->access('request-delete') || $is_admin) {
    return $operations;
  }

  $operations['request_delete'] = [
    'title' => t('Request delete'),
    'url' => $entity->toUrl('request-delete-form')
      ->setRouteParameter('destination', \Drupal::request()
        ->getRequestUri()),
  ];

  return $operations;
}

/**
 * Implements hook_entity_operation_alter().
 */
function eic_flags_entity_operation_alter(array &$operations, EntityInterface $entity) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ('eic_flags.flagged_entities.list' !== $route_name) {
    return;
  }

  $request_type = \Drupal::requestStack()
    ->getCurrentRequest()
    ->get('request_type');
  $handler = \Drupal::service('eic_flags.handler_collector')
    ->getHandlerByType($request_type);
  if (!$handler instanceof HandlerInterface || !$handler->supports($entity)) {
    return;
  }

  $operations = array_filter($operations, function ($operation, $key) {
    return in_array($key, [
      'deny_request',
      'accept_request',
      'archive_request',
    ]);
  }, ARRAY_FILTER_USE_BOTH);
}

/**
 * Implements hook_entity_access().
 */
function eic_flags_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\eic_flags\Service\HandlerInterface $delete_request_handler */
  $delete_request_handler = \Drupal::service('eic_flags.handler_collector')
    ->getHandlerByType(RequestTypes::DELETE);

  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array(
    $entity_type_id,
    array_keys($delete_request_handler->getSupportedEntityTypes()))
  ) {
    return AccessResult::neutral();
  }

  // We allow requests only for certain roles.
  if (!$account->hasPermission('make delete request')) {
    return AccessResult::forbidden();
  }
}
