<?php

/**
 * @file
 * Main module file for EIC Flags module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\eic_flags\Form\RequestCloseForm;
use Drupal\eic_flags\Form\RequestDeleteForm;
use Drupal\eic_flags\RequestStatus;
use Drupal\eic_flags\Service\DeleteRequestManager;

/**
 * Implements hook_theme().
 */
function eic_flags_theme() {
  return [
    'eic_flag_count' => [
      'variables' => [
        'attributes' => [],
        'title' => NULL,
        'action' => 'flag',
        'flag' => NULL,
        'flaggable' => NULL,
      ],
    ],
    'eic_flag_count_text' => [
      'variables' => [
        'title' => NULL,
        'flag_count' => NULL,
        'flag_id' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function eic_flags_cron() {
  $queue = \Drupal::service('queue')->get('eic_flags_notify_queue');
  $five_minutes_ago = strtotime('-5 minutes');
  $ten_minutes_ago = strtotime('-10 minutes');
  $database = \Drupal::database();
  $query = $database->select('flagging', 'f');
  $query->condition('f.created', $five_minutes_ago, '>');
  $query->condition('f.created', $ten_minutes_ago, '<');
  $query->fields('f', ['flag_id', 'entity_type', 'entity_id']);
  $query->distinct(TRUE);
  $result = $query->execute()->fetchAll();
  foreach ($result as $row) {
    $row = (array) $row;
    $queue->createItem($row);
  }
}

/**
 * Returns an array of allowed values for field 'field_request_status'
 */
function eic_flags_field_request_status_allowed_values() {
  return [
    RequestStatus::ACCEPTED => t('Accepted'),
    RequestStatus::ARCHIVED => t('Archived'),
    RequestStatus::DENIED => t('Denied'),
    RequestStatus::OPEN => t('Open'),
  ];
}

/**
 * Implements hook_entity_type_alter.
 */
function eic_flags_entity_type_build(array &$entity_types) {
  foreach (array_keys(DeleteRequestManager::$supportedEntityTypes) as $entity_id) {
    if (!isset($entity_types[$entity_id])) {
      continue;
    }

    $entity_types[$entity_id]
      ->setFormClass('request-delete', RequestDeleteForm::class)
      ->setFormClass('request-close', RequestCloseForm::class)
      ->setLinkTemplate('request-delete-form', '/{entity_type}/{entity_id}/request-delete')
      ->setLinkTemplate('request-close', '/admin/community/{entity_type}/{entity_id}/request/{request_type}/close');
  }
}

/**
 * Implements hook_entity_operation.
 */
function eic_flags_entity_operation(EntityInterface $entity) {
  $entity_type_id = $entity->getEntityTypeId();
  if (!$entity instanceof ContentEntityInterface
    || !in_array($entity_type_id, array_keys(DeleteRequestManager::$supportedEntityTypes))
    || !$entity->access('request-delete')
    || \Drupal::service('router.admin_context')->isAdminRoute()) {
    return [];
  }

  $operations = [];
  $operations['request_delete'] = [
    'title' => t('Request delete'),
    'url' => $entity->toUrl('request-delete-form')->setRouteParameter('destination', \Drupal::request()
      ->getRequestUri()),
  ];

  return $operations;
}

/**
 * Implements hook_entity_access.
 */
function eic_flags_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, array_keys(DeleteRequestManager::$supportedEntityTypes)) || $operation !== 'request-delete') {
    return AccessResult::neutral();
  }

  // We allow delete requests only for certain roles.
  if (empty(array_intersect(['administrator', 'trusted_user', 'content_administrator'], $account->getRoles()))) {
    return AccessResult::forbidden();
  }
}
