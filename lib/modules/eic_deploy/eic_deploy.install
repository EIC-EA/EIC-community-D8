<?php

/**
 * @file
 * Install, update and uninstall functions for the EIC Deploy module.
 */

/**
 * Implements hook_install().
 */
function eic_deploy_install() {
  // Check the install profile. We need to be on minimal, not oe_profile.
  $oldProfile = 'oe_profile';
  $newProfile = 'minimal';

  $extensionConfig = \Drupal::configFactory()->getEditable('core.extension');
  $currentProfile = $extensionConfig->get('profile');

  if ($currentProfile === $newProfile) {
    // When the current profile already matches the new profile, bail out.
    \Drupal::messenger()->addStatus(t('Profile already is Minimal.'));
    return;
  }
  \Drupal::keyValue('system.schema')->delete($oldProfile);
  \Drupal::keyValue('system.schema')->set($newProfile, 8000);

  $modules = $extensionConfig->get('module');
  $modules[$newProfile] = 1000;
  unset($modules[$oldProfile]);
  $extensionConfig->set('module', $modules);
  $extensionConfig->set('profile', $newProfile);
  $extensionConfig->save();
  drupal_flush_all_caches();

  \Drupal::messenger()->addStatus(t('Profile was switched from OE Profile to Minimal.'));
}

/**
 * Implements hook_uninstall().
 */
function eic_deploy_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function eic_deploy_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['eic_deploy_status'] = [
      'title' => t('EIC Deploy status'),
      'value' => t('EIC Deploy value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Re-create moderation states for existing entities.
 */
function eic_deploy_update_9001(&$sandbox) {
  $wiki_workflows = \Drupal::entityTypeManager()
    ->getStorage('content_moderation_state')
    ->loadByProperties([
      'workflow' => 'group_wiki',
    ]);
  // Re-create wiki page workflows.
  foreach ($wiki_workflows as $wiki_workflow) {
    $state = $wiki_workflow->get('moderation_state')->value;
    $entity_id = $wiki_workflow->get('content_entity_id')->value;
    $wiki_workflow->delete();
    $entity = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($entity_id);
    $entity->set('moderation_state', $state);
    $entity->save();
  }
}
