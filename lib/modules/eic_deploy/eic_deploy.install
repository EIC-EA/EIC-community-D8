<?php

/**
 * @file
 * Install, update and uninstall functions for the EIC Deploy module.
 */

/**
 * Implements hook_install().
 */
function eic_deploy_install() {
  // Check the install profile. We need to be on minimal, not oe_profile.
  $oldProfile = 'oe_profile';
  $newProfile = 'minimal';

  $extensionConfig = \Drupal::configFactory()->getEditable('core.extension');
  $currentProfile = $extensionConfig->get('profile');

  if ($currentProfile === $newProfile) {
    // When the current profile already matches the new profile, bail out.
    \Drupal::messenger()->addStatus(t('Profile already is Minimal.'));
    return;
  }
  \Drupal::keyValue('system.schema')->delete($oldProfile);
  \Drupal::keyValue('system.schema')->set($newProfile, 8000);

  $modules = $extensionConfig->get('module');
  $modules[$newProfile] = 1000;
  unset($modules[$oldProfile]);
  $extensionConfig->set('module', $modules);
  $extensionConfig->set('profile', $newProfile);
  $extensionConfig->save();
  drupal_flush_all_caches();

  \Drupal::messenger()->addStatus(t('Profile was switched from OE Profile to Minimal.'));
}

/**
 * Implements hook_uninstall().
 */
function eic_deploy_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function eic_deploy_schema() {
  $schema['eic_deploy_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function eic_deploy_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['eic_deploy_status'] = [
      'title' => t('EIC Deploy status'),
      'value' => t('EIC Deploy value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
