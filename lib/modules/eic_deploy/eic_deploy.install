<?php

/**
 * @file
 * Install, update and uninstall functions for the EIC Deploy module.
 */

use Drupal\Core\Url;
use Drupal\block_content\Entity\BlockContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function eic_deploy_install() {
  // Check the install profile. We need to be on minimal, not oe_profile.
  $oldProfile = 'oe_profile';
  $newProfile = 'minimal';

  $extensionConfig = \Drupal::configFactory()->getEditable('core.extension');
  $currentProfile = $extensionConfig->get('profile');

  if ($currentProfile === $newProfile) {
    // When the current profile already matches the new profile, bail out.
    \Drupal::messenger()->addStatus(t('Profile already is Minimal.'));
    return;
  }
  \Drupal::keyValue('system.schema')->delete($oldProfile);
  \Drupal::keyValue('system.schema')->set($newProfile, 8000);

  $modules = $extensionConfig->get('module');
  $modules[$newProfile] = 1000;
  unset($modules[$oldProfile]);
  $extensionConfig->set('module', $modules);
  $extensionConfig->set('profile', $newProfile);
  $extensionConfig->save();
  drupal_flush_all_caches();

  \Drupal::messenger()->addStatus(t('Profile was switched from OE Profile to Minimal.'));
}

/**
 * Implements hook_uninstall().
 */
function eic_deploy_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function eic_deploy_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['eic_deploy_status'] = [
      'title' => t('EIC Deploy status'),
      'value' => t('EIC Deploy value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Re-create moderation states for existing entities.
 */
function eic_deploy_update_9001(&$sandbox) {
  $wiki_workflows = \Drupal::entityTypeManager()
    ->getStorage('content_moderation_state')
    ->loadByProperties([
      'workflow' => 'group_wiki',
    ]);
  // Re-create wiki page workflows.
  foreach ($wiki_workflows as $wiki_workflow) {
    $state = $wiki_workflow->get('moderation_state')->value;
    $entity_id = $wiki_workflow->get('content_entity_id')->value;
    $wiki_workflow->delete();
    $entity = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($entity_id);
    $entity->set('moderation_state', $state);
    $entity->save();
  }
}

/**
 * Creates contact box block for the help and guidance pages.
 */
function eic_deploy_update_9002(&$sandbox) {
  $block = BlockContent::create([
    'status' => TRUE,
    'type' => 'contact_box',
    // We keep the same UUIDs since they are referenced in configs.
    'uuid' => '63285e84-4aaf-475a-ae6f-169d5dae81e3',
    'info' => 'Contact box - Help & Guidance',
    'body' => [
      'value' => 'Contact us at</br><a class="" href="mailto:support@eic.com">support@eic.com</a>',
      'format' => 'full_html',
    ],
    'field_title' => "Didn't find what you were looking for?",
    'field_cta_button' => [
      'uri' => Url::fromRoute('contact.site_page')->toString(),
      'title' => 'Contact us',
      'link_type' => 'default',
    ],
  ]);
  $block->save();
}

/**
 * Re-create news_stories moderation states for existing entities.
 */
function eic_deploy_update_9003(&$sandbox) {
  $mapping = [
    'draft' => 'draft',
    'published' => 'published',
    'unpublished' => 'unpublished',
    'archived' => 'unpublished',
  ];

  // Load existing states.
  $news_stories_workflows = \Drupal::entityTypeManager()
    ->getStorage('content_moderation_state')
    ->loadByProperties([
      'workflow' => 'news_stories',
    ]);

  // Re-create news_stories workflows.
  foreach ($news_stories_workflows as $news_stories_workflow) {
    $state = $news_stories_workflow->get('moderation_state')->value;
    $entity_id = $news_stories_workflow->get('content_entity_id')->value;
    $news_stories_workflow->delete();

    // Map old state to the new one.
    $state = $mapping[$state] ?? NULL;

    $entity = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($entity_id);
    $entity->set('moderation_state', $state);
    $entity->save();
  }
}

/**
 * Remove group permission to access latest activity stream from anonymous.
 */
function eic_deploy_update_9004(&$sandbox) {
  $groups = Drupal::entityTypeManager()->getStorage('group')
    ->loadByProperties([
      'type' => 'group',
    ]);

  foreach ($groups as $group) {
    $groupPermissionsManager = \Drupal::service('group_permission.group_permissions_manager');
    $groupPermissions = $groupPermissionsManager->loadByGroup($group);

    $rolePermissions = [
      'access latest activity stream',
    ];
    $role = $group->getGroupType()->getAnonymousRoleId();

    $permissions = $groupPermissions->getPermissions();
    foreach ($rolePermissions as $permission) {
      if (
        array_key_exists($role, $permissions) ||
        in_array($permission, $permissions[$role], TRUE)
      ) {
        $permissions[$role] = array_diff($permissions[$role], [$permission]);
      }
    }
    $groupPermissions->setPermissions($permissions);

    $violations = $groupPermissions->validate();

    if (count($violations) > 0) {
      $message = '';
      foreach ($violations as $violation) {
        $message .= "\n" . $violation->getMessage();
      }
      \Drupal::messenger()->addMessage('Group permissions are not saved correctly, because:' . $message);
      continue;
    }

    // Saves the GroupPermission object with a new revision.
    $groupPermissions->setNewRevision();
    $groupPermissions->setRevisionUserId(1);
    $groupPermissions->setRevisionCreationTime(\Drupal::service('datetime.time')
      ->getRequestTime());
    $groupPermissions->setRevisionLogMessage('Group features enabled/disabled.');
    $groupPermissions->save();
  }
}

/**
 * Adds group permission 'view comments' to group outsiders.
 */
function eic_deploy_update_9005(&$sandbox) {
  $new_permissions = [
    'view comments',
  ];

  $roles = [
    'group-outsider',
    'event-outsider',
  ];

  eic_deploy_add_group_permissions_to_role($new_permissions, $roles);
}

/**
 * Adds group permission 'access group node overview' to GO/GA.
 */
function eic_deploy_update_9006(&$sandbox) {
  $new_permissions = [
    'access group_node overview',
  ];

  $roles = [
    'group-owner',
    'group-admin',
    'event-owner',
    'event-admin',
  ];

  $group_visibilities = [
    'public',
    'private',
    'restricted_community_members',
    'custom_restricted',
  ];

  eic_deploy_add_group_permissions_to_role($new_permissions, $roles, $group_visibilities);
}

/**
 * Update all group statistics.
 */
function eic_deploy_update_9007(&$sandbox) {
  /** @var \Drupal\eic_group_statistics\GroupStatisticsHelper $group_statistics_command */
  $group_statistics_command = \Drupal::service('eic_group_statistics.helper');
  $group_statistics_command->updateAllGroupsStatistics();
}

/**
 * Adds group permission 'access members management' to GO/GA/SA/SCM.
 */
function eic_deploy_update_9008(&$sandbox) {
  $new_permissions = [
    'access members management',
  ];

  $roles = [
    'group-owner',
    'group-admin',
    'event-owner',
    'event-admin',
    'organisation-owner',
    'organisation-admin',
    'event-a416e6833',
    'event-bf4b46c3a',
    'event-eca6128ca',
    'group-a416e6833',
    'group-bf4b46c3a',
    'group-eca6128ca',
    'organisation-a416e6833',
    'organisation-bf4b46c3a',
    'organisation-eca6128ca',
  ];

  $group_visibilities = [
    'public',
    'private',
    'restricted_community_members',
    'custom_restricted',
  ];

  eic_deploy_add_group_permissions_to_role($new_permissions, $roles, $group_visibilities);
}

/**
 * Update hook.
 */
function eic_deploy_update_9009() {
  /**
   * Create default terms for story_type and program_type vocabularies.
   */
  $terms = [
    'story_type' => [
      'News',
      'Stories',
      'Events',
      'Open Calls ',
      'Partner Calls',
      'Impact Stories',
    ],
    'program_type' => [
      'EIC Corporate Partnership Programme',
      'EIC Innovation Procurement Programme',
      'EIC Overseas Trade Fair Programme',
      'EIC Women Leadership Programme',
      'EIC Ecosystem Partnership Programme',
      'EIC Investment Programme',
      'EIC & EIT',
      'EIC Scale Up 100',
      'EIC Tech To Market Services',
      'EIC Community Activities',
    ],
  ];

  foreach ($terms as $vid => $terms) {
    foreach ($terms as $name) {
      Term::create([
        'name' => $name,
        'vid' => $vid,
      ])->save();
    }
  }

  /**
   * Removes 'join group' permission role.
   */
  $roles = [
    'organisation-bf4b46c3a',
  ];

  $permissions_to_remove = [
    'join group',
  ];

  foreach ($roles as $role_id) {
    $changed = FALSE;

    $role = Role::load($role_id);
    if ($role) {
      foreach ($permissions_to_remove as $permission) {
        if ($role->hasPermission($permission)) {
          $role->revokePermission($permission);
          $changed = TRUE;
        }
      }

      if ($changed) {
        $role->save();
      }
    }
  }
}

