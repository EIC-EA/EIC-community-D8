<?php

/**
 * @file
 * Install, update and uninstall functions for the EIC Statistics module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\eic_groups\Constants\NodeProperty;
use Drupal\group\Entity\GroupInterface;
use Drupal\group_permissions\Entity\GroupPermission;

/**
 * Implements hook_install().
 */
function eic_groups_install() {
  // Creates new node base field.
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Editable by members'))
    ->setRevisionable(TRUE)
    ->setDefaultValue(FALSE)
    ->setDescription(t('When checked, group members are able to edit the content of this page.'))
    ->setDisplayOptions('view', ['weight' => 1])
    ->setDisplayOptions('form', ['weight' => 1])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition(NodeProperty::MEMBER_CONTENT_EDIT_ACCESS, 'node', 'node', $field_storage_definition);
}

/**
 * Set default permissions to existing group roles.
 */
function eic_groups_update_9001(&$sandbox) {

  $group_permissions = \Drupal::entityQuery('group_permission')
    ->execute();

  $group_permissions = GroupPermission::loadMultiple($group_permissions);

  $members_management_permissions = [
    'access group_node overview',
    'administer members',
    'administer membership requests',
    'view group_membership content',
  ];

  /** @var GroupPermission $group_permission */
  foreach ($group_permissions as &$group_permission) {
    $permissions = $group_permission->getPermissions();

    /** @var GroupInterface $group */
    $group = $group_permission->getGroup();

    if ('group' !== $group->getGroupType()->id() || empty($permissions)) {
      continue;
    }

    foreach ($permissions as $key => &$permission) {
      // ID of the group role permission content manager OR site admin.
      if ('group-eca6128ca' !== $key && 'group-bf4b46c3a' !== $key) {
        continue;
      }

      foreach ($members_management_permissions as &$members_management_permission) {
        if (in_array($members_management_permission, $permission)) {
          continue;
        }

        $permission[] = $members_management_permission;
      }

    }

    $group_permission->setPermissions($permissions);
    $group_permission->setNewRevision();
    $group_permission->setRevisionUserId(1);
    $group_permission->setRevisionCreationTime(time());
    $group_permission->setRevisionLogMessage(t('Set default permissions for content admin.'));

    if (count($group_permission->validate()) > 0) {
      continue;
    }

    $group_permission->save();

    // Save the group entity to reset the cache tags.
    $group->save();
  }
}
