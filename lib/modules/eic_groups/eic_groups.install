<?php

/**
 * @file
 * Install, update and uninstall functions for the EIC Statistics module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\eic_groups\Constants\NodeProperty;
use Drupal\eic_groups\EICGroupsHelper;
use Drupal\group_content_menu\GroupContentMenuInterface;
use Drupal\group_permissions\Entity\GroupPermission;

/**
 * Implements hook_install().
 */
function eic_groups_install() {
  // Creates new node base field.
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Editable by members'))
    ->setRevisionable(TRUE)
    ->setDefaultValue(FALSE)
    ->setDescription(t('When checked, group members are able to edit the content of this page.'))
    ->setDisplayOptions('view', ['weight' => 1])
    ->setDisplayOptions('form', ['weight' => 1])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition(
      NodeProperty::MEMBER_CONTENT_EDIT_ACCESS,
      'node',
      'node',
      $field_storage_definition
    );
}

/**
 * Set default permissions to existing group roles.
 */
function eic_groups_update_9001(&$sandbox) {

  $group_permissions = \Drupal::entityQuery('group_permission')
    ->execute();

  $group_permissions = GroupPermission::loadMultiple($group_permissions);

  $members_management_permissions = [
    'access group_node overview',
    'administer members',
    'administer membership requests',
    'view group_membership content',
  ];

  /** @var \Drupal\group_permissions\Entity\GroupPermission $group_permission */
  foreach ($group_permissions as &$group_permission) {
    $permissions = $group_permission->getPermissions();

    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group = $group_permission->getGroup();

    if ('group' !== $group->getGroupType()->id() || empty($permissions)) {
      continue;
    }

    foreach ($permissions as $key => &$permission) {
      // ID of the group role permission content manager OR site admin.
      if ('group-eca6128ca' !== $key && 'group-bf4b46c3a' !== $key) {
        continue;
      }

      foreach ($members_management_permissions as &$members_management_permission) {
        if (in_array($members_management_permission, $permission)) {
          continue;
        }

        $permission[] = $members_management_permission;
      }

    }

    $group_permission->setPermissions($permissions);
    $group_permission->setNewRevision();
    $group_permission->setRevisionUserId(1);
    $group_permission->setRevisionCreationTime(time());
    $group_permission->setRevisionLogMessage(t('Set default permissions for content admin.'));

    if (count($group_permission->validate()) > 0) {
      continue;
    }

    $group_permission->save();

    // Save the group entity to reset the cache tags.
    $group->save();
  }
}

/**
 * Remove "view comments" permission from group outsider roles.
 */
function eic_groups_update_9002(&$sandbox) {

  $group_permissions = \Drupal::entityQuery('group_permission')
    ->execute();

  $group_permissions = GroupPermission::loadMultiple();

  foreach ($group_permissions as &$group_permission) {
    $permissions = $group_permission->getPermissions();

    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group = $group_permission->getGroup();
    $group_type = $group->getGroupType()->id();
    $roles = [
      "$group_type-outsider",
    ];
    $outsider_roles = [
      'trusted_user',
      'service_authentication',
    ];
    $groupRoleSynchronizer = \Drupal::service('group_role.synchronizer');

    foreach ($outsider_roles as $outsider_role) {
      $role = $groupRoleSynchronizer->getGroupRoleId($group_type, $outsider_role);
      $roles[] = $role;
    }

    if (empty($permissions)) {
      continue;
    }

    foreach ($roles as $role) {
      \Drupal::service('eic_groups.helper')->removeRolePermissionsFromGroup(
        $group_permission,
        $role,
        ['view comments']
      );
    }

    $group_permission->setNewRevision();
    $group_permission->setRevisionUserId(1);
    $group_permission->setRevisionCreationTime(time());
    $group_permission->setRevisionLogMessage(t('Remove "view comments" permission from group outsider role.'));

    if (count($group_permission->validate()) > 0) {
      continue;
    }

    $group_permission->save();

    // Save the group entity to reset the cache tags.
    $group->save();
  }
}

/**
 * Remove old menu link "/members" link from the Organisation.
 */
function eic_groups_update_9003(&$sandbox) {
  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $em */
  $em = \Drupal::service('entity_type.manager');
  $organisations = $em->getStorage('group')->loadByProperties([
    'type' => 'organisation',
  ]);
  $menu_name = 'group_main_menu';

  foreach ($organisations as $organisation) {
    foreach (group_content_menu_get_menus_per_group($organisation) as $group_menu) {
      if (
        $group_menu->getGroupContentType()->getContentPlugin()->getPluginId() ==
        "group_content_menu:$menu_name"
      ) {
        $items = $em->getStorage('menu_link_content')->loadByProperties([
          'menu_name' => GroupContentMenuInterface::MENU_PREFIX . $group_menu->getEntity()->id(),
          'title' => 'Team',
        ]);

        if (empty($items)) {
          continue;
        }

        /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_item_people */
        $menu_item_people = reset($items);
        $menu_item_people->delete();
      }
    }
  }
}

/**
 * Add "administer membership requests" permission to group owner role.
 */
function eic_groups_update_9004(&$sandbox) {

  $group_permissions = \Drupal::entityQuery('group_permission')
    ->execute();

  $group_permissions = GroupPermission::loadMultiple();

  foreach ($group_permissions as &$group_permission) {
    $permissions = $group_permission->getPermissions();

    if (empty($permissions)) {
      continue;
    }

    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group = $group_permission->getGroup();

    $joining_methods = \Drupal::service('oec_group_flex.helper')->getGroupJoiningMethod($group);

    if (!$joining_methods) {
      continue;
    }

    $isMembershipRequestEnabled = TRUE;
    foreach ($joining_methods as $joining_method) {
      if (
        in_array(
          $joining_method['plugin_id'],
          [
            'open_method',
            'tu_open_method',
          ]
        )
      ) {
        $isMembershipRequestEnabled = FALSE;
        break;
      }
    }

    if (!$isMembershipRequestEnabled) {
      continue;
    }

    foreach ($joining_methods as $joining_method) {
      if (
        in_array(
          $joining_method['plugin_id'],
          [
            'group_membership_request',
            'tu_group_membership_request',
          ]
        )
      ) {
        $group_type = $group->getGroupType()->id();

        $ownerGroupRoleId = EICGroupsHelper::getGroupTypeRole($group_type, 'owner');
        \Drupal::service('eic_groups.helper')->addRolePermissionsToGroup(
          $group_permission,
          $ownerGroupRoleId,
          ['administer membership requests']
        );

        $group_permission->setNewRevision();
        $group_permission->setRevisionUserId(1);
        $group_permission->setRevisionCreationTime(time());
        $group_permission->setRevisionLogMessage(t('Add "administer membership requests" permission to group owner role.'));

        if (count($group_permission->validate()) > 0) {
          break;
        }

        $group_permission->save();

        // Save the group entity to reset the cache tags.
        $group->save();
        break;
      }
    }
  }
}
