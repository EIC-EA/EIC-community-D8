<?php

/**
 * @file
 * Primary module hooks for EIC Groups module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\eic_groups\Constants\NodeProperty;
use Drupal\eic_groups\GroupsModerationHelper;
use Drupal\eic_groups\Hooks\CronOperations;
use Drupal\eic_groups\Hooks\EntityOperations;
use Drupal\eic_groups\Hooks\GroupTokens;
use Drupal\eic_groups\Hooks\FormOperations;
use Drupal\eic_groups\Hooks\Pathauto;
use Drupal\eic_groups\Hooks\Preprocess;
use Drupal\eic_user\UserHelper;
use Drupal\group\Entity\GroupContent;
use Drupal\eic_groups\EICGroupsHelper;
use Drupal\group\Access\GroupAccessResult;

/**
 * Implements hook_theme().
 */
function eic_groups_theme($existing, $type, $theme, $path) {
  return [
    'eic_group_header_block' => [
      'variables' => [
        'group' => NULL,
        'group_values' => NULL,
      ],
    ],
    'eic_group_moderated_message_box' => [
      'variables' => [
        'group' => NULL,
        'edit_link' => NULL,
        'delete_link' => NULL,
        'invite_link' => NULL,
        'actions' => [],
        'has_content' => NULL,
        'has_member' => FALSE,
      ],
    ],
    'eic_group_search_menu_block_form' => [
      'render element' => 'form',
    ],
    'eic_group_search_menu_field_search_submit' => [
      'render element' => 'element',
    ],
    'eic_group_last_activities_members' => [
      'variables' => [
        'members' => [],
        'url' => '',
        'translations' => [],
        'datasource' => '',
        'source_class' => '',
        'group_id' => '',
        'is_anonymous' => '',
      ],
    ],
    'eic_group_comments_from_discussion' => [
      'variables' => [
        'discussion_id' => 0,
        'contributors' => [],
        'is_anonymous' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eic_groups_form_group_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(FormOperations::class)
    ->groupGroupAddForm($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_groups_group_insert(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->nodeView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function eic_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Since the group permissions do not exist when hook_group_insert() is
  // invoked, we use a submit handler that will be called after it is created.
  // @todo This might not be sufficient when creating groups programmatically,
  //   e.g. when migrating groups, we should then create the group permissions
  //   ourselves and not rely on group_flex module to create the permissions.
  // Only act on group creation.
  if ($form_state->getFormObject()->getOperation() == 'add') {
    $form['actions']['submit']['#submit'][] = 'eic_groups_group_form_submit';
  }
}

/**
 * Custom submit handler for form_group forms.
 */
function eic_groups_group_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::classResolver(FormOperations::class)
    ->formGroupSubmit($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function eic_groups_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'group_insert':
      if (array_key_exists('group_content_menu', $implementations)) {
        // eic_groups implementation must run after group_content_menu, so we
        // place it at the end.
        $value = $implementations['eic_groups'];
        unset($implementations['eic_groups']);
        $implementations['eic_groups'] = $value;
      }
      break;

  }
}

/**
 * Implements hook_form_alter().
 */
function eic_groups_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_wiki_page_form':
    case 'node_wiki_page_edit_form':
      // Do custom changes in group wiki page forms.
      \Drupal::classResolver(FormOperations::class)
        ->groupWikiPageFormAlter($form, $form_state, $form_id);
      break;

    case 'group_content_group-group_membership_group-join_form':
      // Do custom changes in group membership join form.
      \Drupal::classResolver(FormOperations::class)
        ->groupMembershipJoinFormAlter($form, $form_state, $form_id);
      break;

    case 'group_content_group-group_invitation_add_form':
      \Drupal::classResolver(FormOperations::class)
        ->groupInvitationFormAlter($form, $form_state, $form_id);
      break;

  }
}

/**
 * Implements hook_preprocess_links__node().
 */
function eic_groups_preprocess_links__node(&$variables) {
  /** @var \Drupal\eic_groups\Hooks\Preprocess $class */
  $class = \Drupal::classResolver(Preprocess::class);
  $class->preprocessLinksNode($variables);
}

/**
 * Implements hook_token_info().
 */
function eic_groups_token_info() {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokenInfo();
}

/**
 * Implements hook_tokens().
 */
function eic_groups_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
}

/**
 * Implements hook_group_update().
 */
function eic_groups_group_update(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupUpdate($entity);
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function eic_groups_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\eic_groups\Hooks\Pathauto $class */
  $class = \Drupal::classResolver(Pathauto::class);
  $class->aliasAlter($alias, $context);
}

/**
 * Implements hook_cron().
 */
function eic_groups_cron() {
  \Drupal::classResolver(CronOperations::class)
    ->cron();
}

/**
 * Implements hook_entity_field_access().
 */
function eic_groups_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  return \Drupal::classResolver(EntityOperations::class)
    ->entityFieldAccess($operation, $field_definition, $account, $items);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function eic_groups_group_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $access = GroupAccessResult::neutral();

  $moderation_state = $entity->get('moderation_state')->value;

  switch ($operation) {
    case 'view':
      if (UserHelper::isPowerUser($account)) {
        $access = GroupAccessResult::allowed()
          ->addCacheableDependency($account)
          ->addCacheableDependency($entity);
        break;
      }

      $membership = $entity->getMember($account);

      // If the user is not a member of the group, we do nothing.
      if (!$membership) {
        break;
      }

      // We allow access if the user is the group owner or a group admin, and
      // moderation state is set to DRAFT.
      if ($entity->get('moderation_state')->value === GroupsModerationHelper::GROUP_DRAFT_STATE) {
        if (in_array(EICGroupsHelper::GROUP_OWNER_ROLE, array_keys($membership->getRoles())) ||
            in_array(EICGroupsHelper::GROUP_ADMINISTRATOR_ROLE, array_keys($membership->getRoles()))
        ) {
          $access = GroupAccessResult::allowed()
            ->addCacheableDependency($account)
            ->addCacheableDependency($entity);
        }
      }
      break;

    case 'delete':
      // Deny access to delete group if the group is NOT in pending state and
      // the user is NOT a "site_admin" or a "content_administrator".
      if ($moderation_state !== GroupsModerationHelper::GROUP_PENDING_STATE) {
        $access = GroupAccessResult::forbiddenIf(!UserHelper::isPowerUser($account))
          ->addCacheableDependency($account)
          ->addCacheableDependency($entity);
      }
      break;

  }

  return $access;
}

/**
 * Implements hook_group_content_info_alter().
 */
function eic_groups_group_content_info_alter(array &$definitions) {
  // Overrides the standard group invitation plugin class provided by
  // ginvite module.
  if (isset($definitions['group_invitation'])) {
    $definitions['group_invitation']['class'] = '\Drupal\eic_groups\Plugin\GroupContentEnabler\GroupInvitation';
  }

  foreach ($definitions as &$definition) {
    if (strpos($definition['id'], 'group_node') === FALSE) {
      continue;
    }

    // Overrides the standard group content node class in order to fix access
    // to the operation links.
    $definition['class'] = '\Drupal\eic_groups\Plugin\GroupContentEnabler\GroupNode';
    // Overrides the group content access controll handler class.
    $definition['handlers']['access'] = '\Drupal\eic_groups\Access\GroupContentNodeAccessControlHandler';
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function eic_groups_flagging_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $access = AccessResult::neutral();

  $flagged_entity = $entity->get('flagged_entity')->entity;

  switch ($operation) {
    case 'view':
    case 'flag':
    case 'unflag':
      if ($flagged_entity->getEntityTypeId() === 'group') {
        // Default access.
        $access = AccessResult::allowed();

        // Deny access to flag if the group IS in pending or draft state.
        if (!EICGroupsHelper::groupIsFlaggable($flagged_entity)) {
          $access = AccessResult::forbidden();
        }

        // Add cacheable dependencies.
        $access->addCacheableDependency($entity)
          ->addCacheableDependency($flagged_entity);
      }
      elseif ($flagged_entity->getEntityTypeId() === 'node') {
        // Get the group content entities related to the node.
        $group_contents = GroupContent::loadByEntity($flagged_entity);

        // Node does not belong to any group, so we do nothing.
        if (empty($group_contents)) {
          break;
        }

        // Load the first group content entity found.
        $group_content = reset($group_contents);

        // Load the group.
        $group = $group_content->getGroup();

        // Deny access to flag if the group IS in pending or draft state.
        if (!EICGroupsHelper::groupIsFlaggable($group)) {
          $access = AccessResult::forbidden();
        }

        // Add cacheable dependencies.
        $access->addCacheableDependency($group)
          ->addCacheableDependency($entity)
          ->addCacheableDependency($flagged_entity);
      }
      break;

  }

  return $access;
}

/**
 * Implements hook_entity_operation_alter().
 */
function eic_groups_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'group') {
    return;
  }

  // Gets current path alias.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')
    ->getAliasByPath($current_path);

  // Add publish group operation.
  $publish_url_options = [
    'query' => [
      'destination' => $current_path_alias,
    ],
  ];
  $publish_url = Url::fromRoute('eic_groups.group.publish.confirm_form', ['group' => $entity->id()], $publish_url_options);
  if ($publish_url->access()) {
    $operations['publish'] = [
      'title' => t('Publish'),
      'weight' => -50,
      'url' => $publish_url,
    ];
  }
}

/**
 * Implements hook_preprocess_block__HOOK().
 */
function eic_groups_preprocess_block__group_content_menu(&$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  $plugin_block = $block_manager->createInstance('eic_groups_search_menu_group', []);
  $variables['search_block'] = $plugin_block->build();
}

/**
 * Implements hook_preprocess_block__HOOK().
 */
function eic_groups_preprocess_block__eic_group_content_menu(&$variables) {
  eic_groups_preprocess_block__group_content_menu($variables);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function eic_groups_node_delete(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'book':
      // We need to invalidate group tags otherwise the "Add book page" link
      // will not be shown in the group header until we clear all cache
      // manually. But first, we need to make sure this book node
      // belongs to a group.
      $group_contents = GroupContent::loadByEntity($entity);
      if (!$group_contents) {
        return;
      }

      $group_content = reset($group_contents);

      Cache::invalidateTags($group_content->getGroup()->getCacheTags());
      break;

  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function eic_groups_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'node') {
    $fields[NodeProperty::MEMBER_CONTENT_EDIT_ACCESS] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Editable by members'))
      ->setName(NodeProperty::MEMBER_CONTENT_EDIT_ACCESS)
      ->setRevisionable(TRUE)
      ->setDefaultValue(FALSE)
      ->setDescription(t('When checked, group members are able to edit the content of this page.'))
      ->setDisplayOptions('view', ['weight' => 1])
      ->setDisplayOptions('form', ['weight' => 1])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_predelete().
 */
function eic_groups_entity_predelete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'group') {
    return;
  }

  // Delete group permissions before deleting the group. If we don't do this
  // we will have an error because redirect module will call the method toUrl()
  // from the group permission entity. At that point the group has already been
  // deleted which means it cannot retrieve the canonical url of the group
  // permissions since it requires the group ID as route parameter.
  if ($group_permissions = \Drupal::service('group_permission.group_permissions_manager')->loadByGroup($entity)) {
    $group_permissions->delete();
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function eic_groups_entity_type_alter(array &$entity_types) {
  if (!isset($entity_types['group']) && !isset($entity_types['group_content'])) {
    return;
  }

  // Add custom group membership validation constraint to the group_content
  // entity.
  $entity_types['group_content']->addConstraint('EICGroupMembership');
}

/**
 * Implements hook_entity_presave().
 */
function eic_groups_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'group') {
    return;
  }

  if ($entity->isNew()) {
    return;
  }

  // If group alias is set to manual and has changed, we add the group into a
  // queue so that all group content url aliases can be updated at a later
  // stage with cron.
  if (!$entity->get('path')->pathauto) {
    if ($entity->original->get('path')->alias !== $entity->get('path')->alias) {
      /** @var \Drupal\eic_groups\Hooks\Pathauto $class */
      $class = \Drupal::classResolver(Pathauto::class);
      $class->createGroupUrlAliasUpdateQueueItem($entity);
    }
  }
}
