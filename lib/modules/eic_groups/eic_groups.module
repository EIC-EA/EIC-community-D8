<?php

/**
 * @file
 * Primary module hooks for EIC Groups module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\eic_groups\Hooks\EntityOperations;
use Drupal\eic_groups\Hooks\FormOperations;
use Drupal\eic_groups\Hooks\Preprocess;

/**
 * Implements hook_theme().
 */
function eic_groups_theme($existing, $type, $theme, $path) {
  return [
    'eic_group_header_block' => [
      'variables' => [
        'group' => NULL,
        'group_values' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eic_groups_form_group_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(FormOperations::class)
    ->groupGroupAddForm($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_groups_group_insert(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->nodeView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function eic_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Since the group permissions do not exist when hook_group_insert() is
  // invoked, we use a submit handler that will be called after it is created.
  // Only act on group creation.
  if ($form_state->getFormObject()->getOperation() == 'add') {
    $form['actions']['submit']['#submit'][] = 'eic_groups_group_form_submit';
  }
}

/**
 * Custom submit handler for form_group forms.
 */
function eic_groups_group_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::classResolver(FormOperations::class)
    ->formGroupSubmit($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function eic_groups_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'group_insert':
      if (array_key_exists('group_content_menu', $implementations)) {
        // eic_groups implementation must run after group_content_menu, so we
        // place it at the end.
        $value = $implementations['eic_groups'];
        unset($implementations['eic_groups']);
        $implementations['eic_groups'] = $value;
      }
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function eic_groups_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide book select list from wiki page forms.
  switch ($form_id) {
    case 'node_wiki_page_form':
    case 'node_wiki_page_edit_form':
      $form['book']['bid']['#access'] = FALSE;
      break;

  }
}

/**
 * Implements hook_preprocess_links__node().
 */
function eic_groups_preprocess_links__node(&$variables) {
  /** @var \Drupal\eic_groups\Hooks\Preprocess $class */
  $class = \Drupal::classResolver(Preprocess::class);
  $class->preprocessLinksNode($variables);
}
