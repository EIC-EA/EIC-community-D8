<?php

/**
 * @file
 * Primary module hooks for EIC Groups module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\eic_groups\Hooks\CronOperations;
use Drupal\eic_groups\Hooks\EntityOperations;
use Drupal\eic_groups\Hooks\GroupTokens;
use Drupal\eic_groups\Hooks\FormOperations;
use Drupal\eic_groups\Hooks\Pathauto;
use Drupal\eic_groups\Hooks\Preprocess;
use Drupal\eic_groups\Constants\GroupVisibilityType;

/**
 * Implements hook_theme().
 */
function eic_groups_theme($existing, $type, $theme, $path) {
  return [
    'eic_group_header_block' => [
      'variables' => [
        'group' => NULL,
        'group_values' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eic_groups_form_group_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(FormOperations::class)
    ->groupGroupAddForm($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_groups_group_insert(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->nodeView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function eic_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Since the group permissions do not exist when hook_group_insert() is
  // invoked, we use a submit handler that will be called after it is created.
  // @todo This might not be sufficient when creating groups programmatically,
  //   e.g. when migrating groups, we should then create the group permissions
  //   ourselves and not rely on group_flex module to create the permissions.
  // Only act on group creation.
  if ($form_state->getFormObject()->getOperation() == 'add') {
    $form['actions']['submit']['#submit'][] = 'eic_groups_group_form_submit';
  }
}

/**
 * Custom submit handler for form_group forms.
 */
function eic_groups_group_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::classResolver(FormOperations::class)
    ->formGroupSubmit($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function eic_groups_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'group_insert':
      if (array_key_exists('group_content_menu', $implementations)) {
        // eic_groups implementation must run after group_content_menu, so we
        // place it at the end.
        $value = $implementations['eic_groups'];
        unset($implementations['eic_groups']);
        $implementations['eic_groups'] = $value;
      }
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function eic_groups_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide book select list from wiki page forms.
  switch ($form_id) {
    case 'node_wiki_page_form':
    case 'node_wiki_page_edit_form':
      $form['book']['bid']['#access'] = FALSE;
      break;

  }
}

/**
 * Implements hook_preprocess_links__node().
 */
function eic_groups_preprocess_links__node(&$variables) {
  /** @var \Drupal\eic_groups\Hooks\Preprocess $class */
  $class = \Drupal::classResolver(Preprocess::class);
  $class->preprocessLinksNode($variables);
}

/**
 * Implements hook_token_info().
 */
function eic_groups_token_info() {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokenInfo();
}

/**
 * Implements hook_tokens().
 */
function eic_groups_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
}

/**
 * Implements hook_group_update().
 */
function eic_groups_group_update(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupUpdate($entity);
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function eic_groups_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\eic_groups\Hooks\Pathauto $class */
  $class = \Drupal::classResolver(Pathauto::class);
  $class->aliasAlter($alias, $context);
}

/**
 * @implements hook_search_api_solr_documents_alter
 *
 * Solr needs to be aware of all group permissions so we can filter it in our querybuilder depending of the user context
 */
function eic_groups_search_api_solr_documents_alter(array &$documents, \Drupal\search_api\IndexInterface $index, array $items) {
  /** @var \Solarium\QueryType\Update\Query\Document $document */
  foreach ($documents as $document) {
    $fields = $document->getFields();
    $entity_type = array_key_exists('ss_search_api_datasource', $fields) ? $fields['ss_search_api_datasource'] : NULL;

    if (!$entity_type || 'entity:group' !== $fields['ss_search_api_datasource']) {
      continue;
    }

    $group = \Drupal\group\Entity\Group::load($fields['its_group_id']);

    if (!$group) {
      continue;
    }

    /** @var \Drupal\oec_group_flex\GroupVisibilityDatabaseStorage $group_visibility_storage */
    $group_visibility_storage = \Drupal::service('oec_group_flex.group_visibility.storage');
    $group_visibility_entity = $group_visibility_storage->load($group->id());
    $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_PUBLIC;

    switch ($group_visibility_entity->getType()) {
      case GroupVisibilityType::GROUP_VISIBILITY_PRIVATE:
      case GroupVisibilityType::GROUP_VISIBILITY_COMMUNITY:
        $group_visibility = $group_visibility_entity->getType();
        break;

      // In this case, when we have a custom restriction, we can have multiple restriction options like email domain, trusted users, organisation, ...
      case GroupVisibilityType::GROUP_VISIBILITY_CUSTOM_RESTRICTED:
        $options = $group_visibility_entity->getOptions();
        foreach ($options as $key => $option) {
          // restricted_email_domains_status can be false so we need to check if enable
          if (GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN === $key && $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN . '_status']) {
            $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN;

            // When it's a email domain restriction we need to add a new value to solr document so we can filter on that
            $document->addField(
              'ss_' . GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN,
              $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_EMAIL_DOMAIN . '_conf']
            );
          }

          // @TODO need the trusted users working on group entity before
          if (GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS === $key && $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS . '_status']) {
            $group_visibility = GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS;

            $user_ids = $option[GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS . '_conf'];
            $users = array_map(function($user_id) {
              $user = \Drupal\user\Entity\User::load(reset($user_id));
              if (!$user) {
                return -1;
              }

              return $user->id() . '|' . $user->getAccountName();
            }, $user_ids);

            $document->addField('ss_' . GroupVisibilityType::GROUP_VISIBILITY_OPTION_TRUSTED_USERS, implode(',', $users));
          }
        }
        break;
    }

    /** @var \Drupal\Core\Session\AccountInterface $owner */
    $owner = $group->getOwner();

    $user = \Drupal\user\Entity\User::load($owner->id());
    $document->addField('ss_group_visibility', $group_visibility);
    $document->addField('ss_group_url', $group->toUrl()->toString());
    $document->addField('ss_group_user_url', $user->toUrl()->toString());
  }
}

/**
 * Implements hook_cron().
 */
function eic_groups_cron() {
  \Drupal::classResolver(CronOperations::class)
    ->cron();
}
