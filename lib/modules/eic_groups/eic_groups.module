<?php

/**
 * @file
 * Primary module hooks for EIC Groups module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\eic_groups\Hooks\CronOperations;
use Drupal\eic_groups\Hooks\EntityOperations;
use Drupal\eic_groups\Hooks\GroupTokens;
use Drupal\eic_groups\Hooks\FormOperations;
use Drupal\eic_groups\Hooks\Pathauto;
use Drupal\eic_groups\Hooks\Preprocess;
use Drupal\eic_user\UserHelper;
use Drupal\group\Entity\GroupInterface;

/**
 * Implements hook_theme().
 */
function eic_groups_theme($existing, $type, $theme, $path) {
  return [
    'eic_group_header_block' => [
      'variables' => [
        'group' => NULL,
        'group_values' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eic_groups_form_group_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(FormOperations::class)
    ->groupGroupAddForm($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_groups_group_insert(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function eic_groups_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::classResolver(EntityOperations::class)
    ->nodeView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function eic_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Since the group permissions do not exist when hook_group_insert() is
  // invoked, we use a submit handler that will be called after it is created.
  // @todo This might not be sufficient when creating groups programmatically,
  //   e.g. when migrating groups, we should then create the group permissions
  //   ourselves and not rely on group_flex module to create the permissions.
  // Only act on group creation.
  if ($form_state->getFormObject()->getOperation() == 'add') {
    $form['actions']['submit']['#submit'][] = 'eic_groups_group_form_submit';
  }
}

/**
 * Custom submit handler for form_group forms.
 */
function eic_groups_group_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::classResolver(FormOperations::class)
    ->formGroupSubmit($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function eic_groups_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'group_insert':
      if (array_key_exists('group_content_menu', $implementations)) {
        // eic_groups implementation must run after group_content_menu, so we
        // place it at the end.
        $value = $implementations['eic_groups'];
        unset($implementations['eic_groups']);
        $implementations['eic_groups'] = $value;
      }
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function eic_groups_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_wiki_page_form':
    case 'node_wiki_page_edit_form':
      // Do custom changes in group wiki page forms.
      \Drupal::classResolver(FormOperations::class)
        ->groupWikiPageFormAlter($form, $form_state, $form_id);
      break;

  }
}

/**
 * Implements hook_preprocess_links__node().
 */
function eic_groups_preprocess_links__node(&$variables) {
  /** @var \Drupal\eic_groups\Hooks\Preprocess $class */
  $class = \Drupal::classResolver(Preprocess::class);
  $class->preprocessLinksNode($variables);
}

/**
 * Implements hook_token_info().
 */
function eic_groups_token_info() {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokenInfo();
}

/**
 * Implements hook_tokens().
 */
function eic_groups_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  /** @var \Drupal\eic_groups\Hooks\GroupTokens $class */
  $class = \Drupal::classResolver(GroupTokens::class);
  return $class->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
}

/**
 * Implements hook_group_update().
 */
function eic_groups_group_update(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupUpdate($entity);
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function eic_groups_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\eic_groups\Hooks\Pathauto $class */
  $class = \Drupal::classResolver(Pathauto::class);
  $class->aliasAlter($alias, $context);
}

/**
 * Implements hook_cron().
 */
function eic_groups_cron() {
  \Drupal::classResolver(CronOperations::class)
    ->cron();
}

/**
 * Implements hook_entity_field_access().
 */
function eic_groups_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  $access = AccessResult::neutral();

  $group_restricted_fields = [
    'field_related_groups',
    'field_related_news_stories',
  ];

  // If field is non of the restricted ones, we do nothing.
  if (!in_array($field_definition->getName(), $group_restricted_fields)) {
    return $access;
  }

  if (!$items) {
    return $access;
  }

  $entity = $items->getEntity();

  if ($entity instanceof GroupInterface && $entity->bundle() === 'group') {
    switch ($operation) {
      case 'edit':
        // Deny access if it's a new group and the user doesn't have
        // "administrator" or "content_administrator" roles.
        if ($entity->isNew()) {
          $access = AccessResult::forbiddenIf(!in_array(UserHelper::ROLE_SITE_ADMINISTRATOR, $account->getRoles(TRUE)) && !in_array(UserHelper::ROLE_CONTENT_ADMINISTRATOR, $account->getRoles(TRUE)))
            ->addCacheableDependency($account);
          break;
        }
        break;

    }
  }

  return $access;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function eic_groups_group_permission_insert(EntityInterface $entity) {
  \Drupal::classResolver(EntityOperations::class)
    ->groupPermissionInsert($entity);
}

/**
 * Implements hook_group_content_info_alter().
 */
function eic_groups_group_content_info_alter(array &$definitions) {
  // Overrides the standard group invitation plugin class provided by
  // ginvite module.
  if (isset($definitions['group_invitation'])) {
    $definitions['group_invitation']['class'] = '\Drupal\eic_groups\Plugin\GroupContentEnabler\GroupInvitation';
  }
}
