<?php

/**
 * @file
 * Functions to support theming.
 */

// Define constant for the includes folder. This .theme file should contain as
// little code as possible. Instead, place theme implementations in separate
// files.
use Drupal\user\Entity\User;
use Drupal\file\Entity\File;

define('INCLUDES_FOLDER', 'includes');

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Scan and declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
function eic_community_scan_include_files($folder) {
  $files = scandir(__DIR__ . '/' . $folder);
  if (!empty($files)) {
    foreach (array_diff($files, ['..', '.']) as $file) {
      if (is_dir(__DIR__ . '/' . $folder . '/' . $file)) {
        eic_community_scan_include_files("$folder/$file");
      }
      else {
        eic_community_include('eic_community', "$folder/$file");
      }
    }
  }
}

/**
 * Scan and include files from preprocess folder.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_FOLDER)) {
  eic_community_scan_include_files(INCLUDES_FOLDER);
}

/**
 * Transform a user entity for a storybook template.
 */
function eic_community_get_teaser_user_display(User $user) {
  $author = [
    'name' => $user->getDisplayName(),
    'path' => $user->toUrl()->toString(),
  ];

  if (!$user->get('field_media')->isEmpty()) {
    $author['image'] = [
      'src' => File::load($user->get('field_media')->getString())->createFileUrl(),
      'alt' => $author['name'],
    ];
  }

  return $author;
}

/**
 * Transform a timestamp for a storybook template.
 */
function eic_community_get_teaser_time_display($timestamp) {
  $time_ago = \Drupal::service('date.formatter')->formatTimeDiffSince($timestamp, ['granularity' => 1]);

  return t('@time ago', ['@time' => $time_ago]);
}
