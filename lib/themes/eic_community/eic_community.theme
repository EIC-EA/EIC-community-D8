<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block\BlockInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\media\MediaInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media\Plugin\media\Source\OEmbed;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalPhotoSource;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalVideoSource;
use Drupal\eic_community\DocumentMediaValueExtractor;
use Drupal\eic_community\ValueObject\FileValueObject;
use Drupal\eic_community\ValueObject\DateValueObject;
use Drupal\eic_community\ValueObject\GalleryItemValueObject;
use Drupal\eic_community\ValueObject\ImageValueObject;
use Drupal\eic_community_helper\EuropeanUnionLanguages;
use Drupal\oe_media_iframe\Plugin\media\Source\Iframe;
use Drupal\Component\Render\FormattableMarkup;

// Define constant for the includes folder. This .theme file should contain as
// little code as possible. Instead, place theme implemenations in separate
// files.
define('INCLUDES_FOLDER', 'includes');

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Scan and declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
function eic_community_scan_include_files($folder) {
  $files = scandir(__DIR__ . '/' . $folder);
  if (!empty($files)) {
    foreach (array_diff($files, ['..', '.']) as $file) {
      if (is_dir(__DIR__ . '/' . $folder . '/' . $file)) {
        eic_community_scan_include_files("$folder/$file");
      }
      else {
        eic_community_include('eic_community', "$folder/$file");
      }
    }
  }
}

/**
 * Scan and include files from preprocess folder.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_FOLDER)) {
  eic_community_scan_include_files(INCLUDES_FOLDER);
}

/**
 * Implements hook_preprocess_field().
 *
 * Add paragraph formatting to body.
 */
function eic_community_preprocess_field(&$variables, $hook): void {
  if ($variables['field_name'] === 'body') {
    $variables['attributes']['class'][] = 'ecl-editor';
  }

  // Add the ECL image class to the image fields.
  $field_name = $variables['field_name'];
  if (in_array($field_name, ['oe_media_avportal_photo'])) {
    foreach ($variables['items'] as &$item) {
      $item['content']['#attributes']['class'][] = 'ecl-u-width-100';
      $item['content']['#attributes']['class'][] = 'ecl-u-height-auto';
    }
  }

  if ($variables['field_name'] === 'oe_related_links') {
    foreach ($variables['items'] as $delta => $item) {
      $variables['items'][$delta]['content'] = [
        '#type' => 'pattern',
        '#id' => 'list_item',
        '#variant' => 'default',
        '#fields' => [
          'url' => $item['content']['#url'],
          'title' => $item['content']['#title'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * @see template_preprocess_pager()
 *
 * Generates pagination items for ECL pagination component.
 */
function eic_community_preprocess_pager(array &$variables): void {
  $element = $variables['pager']['#element'];
  $parameters = $variables['pager']['#parameters'];
  $route_name = $variables['pager']['#route_name'];
  $route_parameters = $variables['pager']['#route_parameters'] ?? [];
  global $pager_page_array, $pager_total;
  // Maximum page number for this pager.
  $pager_max = $pager_total[$element];
  // Nothing to do if there is only one page.
  if ($pager_max <= 1) {
    return;
  }
  // Max number of pages to display next to the current page (left/right).
  // The first and last page links are excluded from this count.
  $pager_offset = 2;
  // The page we are currently paged to.
  $pager_current = $pager_page_array[$element] + 1;
  // First page of the pagination calculated by offset from current.
  $pager_first = $pager_offset < $pager_current ? $pager_current - $pager_offset : 1;
  // Last page of the pagination calculated by offset from current.
  $pager_last = $pager_current + $pager_offset;

  // Remove extra pages if last page is larger than maximum.
  if ($pager_last > $pager_max) {
    $pager_last = $pager_max;
  }

  // Array to collect the pagination items.
  $ecl_items = [];

  // Prepare navigation link item for previous/next links with defaults.
  $nav_link = [
    'link' => [
      'icon' => [
        'path' => $variables['eic_icon_path'],
        'type' => 'ui',
        'name' => 'corner-arrow',
        'size' => 'xs',
        'transform' => 'rotate-270',
      ],
    ],
  ];
  // Prepare ellipsis item.
  $ellipsis = [
    'type' => 'ellipsis',
    'label' => '...',
  ];

  // Add 'Previous' navigation link.
  if ($pager_current > 1) {
    $options = [
      'query' => pager_query_add_page($parameters, $element,
        $pager_page_array[$element] - 1),
    ];
    $nav_link['link']['link'] = [
      'path' => Url::fromRoute($route_name, $route_parameters, $options),
      'label' => t('Previous'),
      'icon_position' => 'before',
    ];
    $nav_link['type'] = 'previous';
    $nav_link['aria_label'] = t('Go to previous page');
    $ecl_items[] = $nav_link;
  }

  // Add first page link.
  if ($pager_first != $pager_current) {
    $options = [
      'query' => pager_query_add_page($parameters, $element, 0),
    ];
    $ecl_items[] = [
      'type' => 'first',
      'link' => [
        'link' => [
          'path' => Url::fromRoute($route_name, $route_parameters, $options),
          'label' => '1',
        ],
      ],
      'aria_label' => t('Go to page @number', ['@number' => 1]),
    ];
  }

  // Add first ellipsis.
  if ($pager_current - $pager_offset > 2) {
    $ecl_items[] = $ellipsis;
  }

  // Generate page link items.
  for ($i = $pager_first; $i <= $pager_current + $pager_offset && $i <= $pager_last; $i++) {
    $label = (string) $i;
    if ($i == $pager_current) {
      $ecl_items[] = [
        'type' => 'current',
        'label' => $label,
        'aria_label' => t('Page @number', ['@number' => $label]),
      ];
    }
    else {
      // Skip first or last page.
      if ($i == 1 || $i == $pager_max) {
        continue;
      }
      $options = [
        'query' => pager_query_add_page($parameters, $element, $i - 1),
      ];
      $ecl_items[] = [
        'link' => [
          'link' => [
            'path' => Url::fromRoute($route_name, $route_parameters, $options),
            'label' => $label,
          ],
        ],
        'aria_label' => t('Go to page @number', ['@number' => $i]),
      ];
    }
  }

  // Add second ellipsis.
  if ($pager_last < $pager_max - 1) {
    $ecl_items[] = $ellipsis;
  }

  // Add last page link.
  if ($pager_max != $pager_current) {
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_max - 1),
    ];
    $ecl_items[] = [
      'type' => 'last',
      'link' => [
        'link' => [
          'path' => Url::fromRoute($route_name, $route_parameters, $options),
          'label' => (string) $pager_max,
        ],
      ],
      'aria_label' => t('Go to page @number', ['@number' => $pager_max]),
    ];
  }

  // Add 'Next' navigation link.
  if ($pager_current < $pager_max) {
    $options = [
      'query' => pager_query_add_page($parameters, $element,
        $pager_page_array[$element] + 1),
    ];
    $nav_link['link']['link'] = [
      'path' => Url::fromRoute($route_name, $route_parameters, $options),
      'label' => t('Next'),
      'icon_position' => 'after',
    ];
    $nav_link['type'] = 'next';
    $nav_link['aria_label'] = t('Go to next page');
    $nav_link['link']['icon']['transform'] = 'rotate-90';
    $ecl_items[] = $nav_link;
  }
  $variables['label'] = t('Pagination');
  $variables['ecl_items'] = $ecl_items;
}

/**
 * Implements hook_preprocess_links().
 */
function eic_community_preprocess_links__language_block(array &$variables): void {
  $variables['languages'] = [];
  $variables['current_language'] = [];
  foreach ($variables['links'] as $language_code => $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['link']['#url'];
    $href = $url
      ->setOptions($link['link']['#options'])
      ->setAbsolute(TRUE)
      ->toString();

    $language_internal = $language_code;
    if (EuropeanUnionLanguages::hasLanguage($language_code)) {
      $language_internal = EuropeanUnionLanguages::getInternalLanguageCode($language_code);
    }

    $language = [
      'path' => $href,
      'label' => $link['link']['#title'],
      // Pass original language code which can be useful for some other
      // preprocessors.
      'hreflang' => $language_code,
      'lang' => $language_internal,
    ];

    if ($language_code === $variables['current_language_id']) {
      $variables['current_language'] = [
        'path' => $href,
        'hreflang' => $language_code,
        'lang' => $language_internal,
        'label' => $link['link']['#title'],
      ];
      $language['active'] = TRUE;
    }

    $variables['languages'][] = $language;
  }
}

/**
 * Implements hook_preprocess_links__oe_multilingual_content_language_block().
 *
 * Adds extra variables regarding the current and the unavailable languages,
 * and prepares the links for rendering.
 */
function eic_community_preprocess_links__oe_multilingual_content_language_block(
  array &$variables
): void {
  $entity = \Drupal::service('oe_multilingual.helper')
    ->getEntityFromCurrentRoute();
  /** @var \Drupal\Core\Entity\EntityInterface $translation */
  $translation = \Drupal::service('oe_multilingual.helper')
    ->getCurrentLanguageEntityTranslation($entity);
  $variables['current'] = $translation->language()->getName();
  /** @var \Drupal\Core\Language\LanguageInterface[] $languages */
  $languages = \Drupal::service('language_manager')->getNativeLanguages();
  $variables['unavailable'] = $languages[$variables['current_language_id']]->getName();

  // Normalize the links to an array of optional languages suitable for the ECL.
  $variables['options'] = [];
  foreach ($variables['links'] as $language_code => $link) {

    $language_internal = $language_code;
    if (EuropeanUnionLanguages::hasLanguage($language_code)) {
      $language_internal = EuropeanUnionLanguages::getInternalLanguageCode($language_code);
    }

    /** @var \Drupal\Core\Url $url */
    $url = $link['link']['#url'];
    $href = $url
      ->setOptions($link['link']['#options'])
      ->setAbsolute(TRUE)
      ->toString();

    $variables['options'][] = [
      'href' => $href,
      'hreflang' => $language_code,
      'label' => $link['link']['#title'],
      'lang' => $language_internal,
    ];
  }

  // Generate unique element ID for the expandable component.
  $variables['expandable_id'] = Html::getUniqueId('ecl-expandable');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_page_header(array &$variables): void {
  // Generate unique element ID for the expandable component.
  $variables['expandable_id'] = Html::getUniqueId('ecl-expandable');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_gallery__preview(array &$variables): void {
  foreach ($variables['items'] as &$item) {
    $item = GalleryItemValueObject::fromArray($item);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_accordion(array &$variables): void {
  // If no identifier is provided generate a random, unique one.
  if (empty($variables['identifier'])) {
    $variables['identifier'] = Html::getUniqueId('ecl-accordion');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_dropdown(array &$variables): void {
  $variables['id'] = Html::getUniqueId('ecl-button-dropdown');
}

/**
 * Implements hook_preprocess_html() for html.html.twig.
 *
 * Add css class for splash page.
 */
function eic_community_preprocess_html(array &$variables): void {
  if ('language_selection_page' === \Drupal::request()->attributes->get('_route')) {
    $variables['attributes']['class'][] = 'page-splash';
  }
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-list-item.html.twig.
 */
function eic_community_preprocess_paragraph__oe_list_item(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $list_item_variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
  $variables['variant'] = $list_item_variant ?? 'default';
  $variables['url'] = $paragraph->get('field_oe_link')->first()->getUrl();

  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  // Extract the image if present.
  if (!$paragraph->get('field_oe_image')->isEmpty()) {
    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $image_item */
    $image_item = $paragraph->get('field_oe_image')->first();
    $file = $image_item->get('entity')->getValue();
    $variables['image'] = [
      'src' => file_url_transform_relative(file_create_url($file->getFileUri())),
      'alt' => $image_item->get('alt')->getValue(),
    ];

    // Caches are handled by the formatter usually. Since we are not rendering
    // the original render arrays, we need to propagate our caches to the
    // paragraph template.
    $cacheability->addCacheableDependency($file);
  }

  // Prepare the date fields if date is available.
  if (!$paragraph->get('field_oe_date')->isEmpty()) {
    $variables['date'] = DateValueObject::fromDateTimeItem($paragraph->get('field_oe_date')
      ->first());

    // Add the timezone context to the cache.
    // @see \Drupal\datetime\Plugin\Field\FieldFormatter\DateTimeFormatterBase::buildDate()
    $cacheability->addCacheContexts(['timezone']);
  }

  // Prepare the metas if available.
  if (!$paragraph->get('field_oe_meta')->isEmpty()) {
    $metas = [];
    foreach ($paragraph->get('field_oe_meta') as $item) {
      $metas[] = $item->value;
    }
    $variables['meta'] = $metas;
  }

  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-list-item-block.html.twig.
 */
function eic_community_preprocess_paragraph__oe_list_item_block(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Set up the correct variant name.
  $variables['variant'] = 'list_item_block_' .
    $paragraph->get('field_oe_list_item_block_layout')->first()->value;

  $variables['items'] = [];
  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $delta => $item) {
    $variables['items'][] = $variables['content']['field_oe_paragraphs'][$delta];
  }

  // Prepare the button variables if a link has been specified.
  if ($paragraph->get('field_oe_link')->isEmpty()) {
    return;
  }

  /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
  $link_item = $paragraph->get('field_oe_link')->first();
  $variables['button_url'] = $link_item->getUrl();
  $variables['button_label'] = $link_item->get('title')->getValue();
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-content-row--variant-inpage_navigation.html.twig.
 *
 * Prepares the inpage navigation by creating links for the inner paragraphs
 * that implement a title.
 */
function eic_community_preprocess_paragraph__oe_content_row__variant_inpage_navigation(
  array &$variables
): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->get('field_oe_paragraphs')->isEmpty()) {
    return;
  }

  // Add default fallback title for inpage naviagtion.
  $variables['title'] = t('Page contents');
  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  // Create a shortcut to the render array for the field.
  $field_render = &$variables['content']['field_oe_paragraphs'];
  $links = [];
  $referenced_entities = $paragraph->get('field_oe_paragraphs')
    ->referencedEntities();
  foreach ($referenced_entities as $delta => $sub_paragraph) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $sub_paragraph */
    $has_field = $sub_paragraph->hasField('field_oe_title');
    if (!$has_field || $sub_paragraph->get('field_oe_title')->isEmpty()) {
      continue;
    }

    $unique_id = Html::getUniqueId('ecl-inpage-' . $sub_paragraph->id());
    // Wrap the paragraph in a div with a specific id set as anchor.
    $field_render[$delta]['#theme_wrappers']['container'] = [
      '#attributes' => ['id' => $unique_id],
    ];

    // Get sub-paragraph translation.
    $sub_paragraph = \Drupal::service('entity.repository')
      ->getTranslationFromContext($sub_paragraph,
        $paragraph->language()->getId());

    // Add a link pointing to the paragraph.
    $links[] = [
      'href' => '#' . $unique_id,
      'label' => $sub_paragraph->get('field_oe_title')->first()->value,
    ];
  }

  $variables['links'] = $links;
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-text-feature-media.html.twig.
 */
function eic_community_preprocess_paragraph__oe_text_feature_media(array &$variables): void {
  $variables['image'] = [];

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    return;
  }

  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct media translation.
  $media = \Drupal::service('entity.repository')
    ->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability->addCacheableDependency($media);

  // Get the media source.
  $source = $media->getSource();

  if ($source instanceof MediaAvPortalVideoSource || $source instanceof OEmbed || $source instanceof Iframe) {
    // Default video aspect ratio is set to 16:9.
    $variables['ratio'] = '16:9';

    // Load information about the media and the display.
    $media_type = \Drupal::entityTypeManager()
      ->getStorage('media_type')
      ->load($media->bundle());
    $cacheability->addCacheableDependency($media_type);
    $source_field = $source->getSourceFieldDefinition($media_type);
    $display = EntityViewDisplay::collectRenderDisplay($media,
      'eic_community_main_content');
    $cacheability->addCacheableDependency($display);
    $display_options = $display->getComponent($source_field->getName());

    // If it is an OEmbed resource, render it and pass it as embeddable data
    // only if it is of type video or html.
    if ($source instanceof OEmbed) {
      $oembed_type = $source->getMetadata($media, 'type');
      if (in_array($oembed_type, ['video', 'html'])) {
        $variables['video'] = $media->{$source_field->getName()}->view($display_options);
        $cacheability->applyTo($variables);
        return;
      }
    }

    // If its an AvPortal video or an iframe video, render it.
    $variables['video'] = $media->{$source_field->getName()}->view($display_options);
    $cacheability->applyTo($variables);

    // When dealing with iframe videos, also respect its given aspect ratio.
    if ($media->bundle() === 'video_iframe') {
      $ratio = $media->get('oe_media_iframe_ratio')->value;
      $variables['ratio'] = str_replace('_', ':', $ratio);
    }

    return;
  }

  // If its an image media, render it and assign it to the image variable.
  if ($source instanceof MediaAvPortalPhotoSource || $source instanceof Image) {
    $thumbnail = $media->get('thumbnail')->first();
    $variables['image'] = ImageValueObject::fromStyledImageItem($thumbnail,
      'eic_community_medium_no_crop');
    $cacheability->applyTo($variables);
    return;
  }

  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_pattern().
 */
function eic_community_preprocess_pattern_date_block(array &$variables): void {
  // This make sure that the variant value will always fallback to
  // "default" if an empty or not valid value is passed.
  $variants = [
    'default',
    'ongoing',
    'cancelled',
    'past',
  ];

  $variables['variant'] = in_array($variables['variant'], $variants,
    TRUE) ? $variables['variant'] : 'default';
}

/**
 * Implements hook_preprocess_pattern_file__preview().
 */
function eic_community_preprocess_pattern_file__preview(array &$variables): void {
  $variables['file'] = FileValueObject::fromArray($variables['file']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_file_translation__preview(array &$variables): void {
  $variables['file'] = FileValueObject::fromArray($variables['file']);

  foreach ($variables['translations'] as $index => $translation) {
    $variables['translations'][$index] = FileValueObject::fromArray($translation);
  }
}

/**
 * Implements hook_preprocess_pattern_file_teaser__preview().
 */
function eic_community_preprocess_pattern_file_teaser__preview(array &$variables): void {
  $variables['file'] = FileValueObject::fromArray($variables['file']);

  foreach ($variables['translations'] as $index => $translation) {
    $translation['file'] = FileValueObject::fromArray($translation['file']);
    $variables['translations'][$index] = $translation;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_list_item__variant_date__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_list_item__variant_date_cancelled__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_list_item__variant_date_ongoing__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_list_item__variant_date_past__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_date_block__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_text_featured_media__preview(array &$variables): void {
  $variables['image'] = ImageValueObject::fromArray($variables['image']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_preprocess_input().
 */
function eic_community_preprocess_input__search(array &$variables): void {
  $variables['input_array'] = _eic_community_preprocess_search_input_text($variables['element']);
}

/**
 * Implements hook_preprocess_form().
 */
function eic_community_preprocess_form__oe_search_search_form(array &$variables): void {
  $variables['input_array'] = _eic_community_preprocess_search_input_text($variables['element']['keys']);
  $variables['input_array']['hide_label'] = TRUE;
  $variables['label'] = $variables['input_array']['label'] = t('Search');
}

/**
 * Helper function to additionally preprocess textfield search elements.
 *
 * Moves the label element to the input template and creates some helper
 * variables to be used with the ECL templates.
 *
 * @param array $element
 *   Set of element data.
 *
 * @return array
 *   The ECL array for the input element.
 */
function _eic_community_preprocess_search_input_text(array $element): array {
  // Process element attributes into an ECL input array.
  $ecl_array = [
    'id' => $element['#attributes']['id'],
    'name' => $element['#attributes']['name'],
    'disabled' => isset($element['#attributes']['disabled']) ? $element['#attributes']['disabled'] : FALSE,
    'type' => $element['#attributes']['type'],
    'class' => $element['#attributes']['class'],
  ];

  // Map rest of the array elements.
  $ecl_array['invalid'] = !empty($element['#errors']);
  return $ecl_array;
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 *
 * For all responsive images, we need to set the ECL image classes.
 */
function eic_community_preprocess_responsive_image_formatter(&$variables) {
  $variables['responsive_image']['#attributes']['class'][] = 'ecl-u-width-100';
  $variables['responsive_image']['#attributes']['class'][] = 'ecl-u-height-auto';
}

/**
 * Implements template_preprocess_block__system_branding_block().
 *
 * Add required variables to follow ECL guidelines.
 */
function eic_community_preprocess_block__system_branding_block(&$variables) {
  $variables['site_logo_alt'] = !empty($variables['site_name']) ?
    t('@site_name logo', ['@site_name' => $variables['site_name']]) :
    '';

  $route_options = ['absolute' => TRUE];
  $variables['site_logo_href'] = Url::fromRoute('<front>', [], $route_options)
    ->toString();
}

/**
 * Implements hook_preprocess_media__document__default().
 *
 * Prepares the default view mode for the document media type.
 */
function eic_community_preprocess_media__document__default(&$variables) {
  /** @var \Drupal\media\Entity\Media $media */
  $media = $variables['media'];
  $file_value = DocumentMediaValueExtractor::getFileValue($media);
  if (!$file_value) {
    return;
  }

  $variables['file'] = $file_value;

  // Generate the file information for all available translations.
  foreach ($media->getTranslationLanguages() as $langcode => $language) {
    // We don't want to include the information of the current language again.
    if ($media->language()->getId() === $langcode) {
      continue;
    }

    $translation = $media->getTranslation($langcode);
    $translation_file_value = DocumentMediaValueExtractor::getFileValue($translation);
    if ($translation_file_value) {
      $variables['translations'][] = $translation_file_value;
    }
  }
}

/**
 * Implements hook_preprocess_media__document__eic_community_main_content().
 *
 * Style the view mode used for embedding the document media entity.
 */
function eic_community_preprocess_media__document__eic_community_main_content(&$variables) {
  eic_community_preprocess_media__document__default($variables);
}

/**
 * Implements template_preprocess_language_selection_page_content().
 */
function eic_community_preprocess_language_selection_page_content(&$variables) {
  if (empty($variables['languages'])) {
    return;
  }

  foreach ($variables['languages'] as &$language) {
    $language['path'] = $language['href'];
  }
}

/**
 * Implements hook_preprocess_table().
 */
function eic_community_preprocess_table(array &$variables): void {
  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');

  // Assign data to table headers as ECL expects it.
  $ecl_table_header_data = [];
  $variables['header'] = isset($variables['header']) ? $variables['header'] : [];
  foreach ($variables['header'] as &$cell) {
    $cell['label'] = $cell['content'];

    // We need to generate the value of the data-ecl-table-header attribute for
    // each row cell. Table headers may be strings or render arrays, so we count
    // on the inline template render element to do the right thing.
    $cell_header_render_array = [
      '#type' => 'inline_template',
      '#template' => '{{ label|render|striptags }}',
      '#context' => [
        'label' => $cell['content'],
      ],
    ];
    $cell_header_data = $renderer->render($cell_header_render_array);

    // Assign colspan value to the cell, if any. It will be used later.
    if (isset($cell['attributes']['colspan'])) {
      $cell['colspan'] = (int) $cell['attributes']['colspan']->value();
    }

    // Account for colspan values when counting the number of columns.
    // This ensures that header content is is displayed on related columns
    // when the table is displayed on small screen devices.
    $columns_count = isset($cell['colspan']) ? $cell['colspan'] : 1;
    for ($i = 1; $i <= $columns_count; $i++) {
      $ecl_table_header_data[] = $cell_header_data;
    }
  }
  $variables['headers'] = [$variables['header']];

  // Assign data to table rows as ECL expects it.
  foreach ($variables['rows'] as &$row) {
    $index = 0;
    foreach ($row['cells'] as &$cell) {
      $cell['label'] = $cell['content'];
      if (isset($ecl_table_header_data[$index])) {
        $cell['data-ecl-table-header'] = $ecl_table_header_data[$index];
      }
      $index++;
    }
  }
}

/**
 * Implements template_preprocess_block__eic_community_main_page_content().
 */
function eic_community_preprocess_block__eic_community_main_page_content(&$variables) {
  $variables['attributes']['class'][] = 'ecl-u-mb-2xl';
}

/**
 * Implements template_preprocess_block__eic_community_tabs().
 */
function eic_community_preprocess_block__eic_community_tabs(&$variables) {
  $variables['attributes']['class'][] = 'ecl-u-mb-2xl';
}

/**
 * Implements hook_preprocess_paragraph() for oe_social_media_follow paragraph.
 */
function eic_community_preprocess_paragraph__oe_social_media_follow(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['variant'] = $paragraph->get('field_oe_social_media_variant')->value;
  $variables['label'] = $paragraph->get('field_oe_title')->value;
  $links = $paragraph->get('field_oe_social_media_links')->getValue();
  $variables['links'] = [];
  foreach ($links as $key => $link) {
    $variables['links'][$key]['service'] = $link['link_type'];
    $variables['links'][$key]['label'] = $link['title'];
    $variables['links'][$key]['url'] = Url::fromUri($link['uri']);
  }
  if (!$paragraph->get('field_oe_social_media_see_more')->isEmpty()) {
    $other_link = $paragraph->get('field_oe_social_media_see_more')
      ->first()
      ->getValue();
    $variables['links'][] = [
      'label' => $other_link['title'],
      'url' => Url::fromUri($other_link['uri']),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_link(array &$variables): void {
  // Set default variant to 'standalone', if none given.
  $variables['variant'] = $variables['variant'] ?: 'standalone';
  $attributes = [];

  // Make sure we always have an URL object in place.
  if (is_string($variables['url'])) {
    $variables['url'] = Url::fromUserInput($variables['url']);
  }

  // Extract attributes from the URL object and set them as default.
  if ($variables['url'] instanceof Url) {
    $attributes = (array) $variables['url']->getOption('attributes');
  }

  // Add ECL link classes to attributes.
  $variables['attributes'] = new Attribute($attributes);
  $variables['attributes']->addClass('ecl-link',
    'ecl-link--' . $variables['variant']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_link__preview(array &$variables): void {
  // Pattern preview will pass along a \Drupal\Core\Render\Markup object.
  $variables['url'] = Url::fromUserInput((string) $variables['url']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_page_header__preview(array &$variables): void {
  // We are going to accept only local images for the background image of the
  // preview.
  $variables['background_image_url'] = base_path() .
    drupal_get_path('module', 'eic_community_helper') .
    '/images/' . $variables['background_image_url'];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function eic_community_preprocess_paragraph__oe_facts_figures(array &$variables): void {
  $paragraph = $variables['paragraph'];
  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }
  if (!$paragraph->get('field_oe_link')->isEmpty()) {
    $variables['view_all']['path'] = $paragraph->get('field_oe_link')
      ->first()
      ->getUrl();
    $variables['view_all']['label'] = $paragraph->get('field_oe_link')
      ->first()
      ->get('title')
      ->getValue();
  }
  $variables['items'] = [];

  /** @var \Drupal\paragraphs\Entity\Paragraph $sub_paragraph */
  $referenced_entities = $paragraph->get('field_oe_paragraphs')
    ->referencedEntities();
  foreach ($referenced_entities as $sub_paragraph) {
    // Get sub-paragraph translation.
    $sub_paragraph = \Drupal::service('entity.repository')
      ->getTranslationFromContext($sub_paragraph,
        $paragraph->language()->getId());
    $variables['items'][] = [
      'icon' => $sub_paragraph->get('field_oe_icon')->value,
      'value' => $sub_paragraph->get('field_oe_title')->value,
      'title' => $sub_paragraph->get('field_oe_subtitle')->value,
      'description' => $sub_paragraph->get('field_oe_plain_text_long')->value,
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function eic_community_preprocess_paragraph__oe_timeline(array &$variables): void {
  $paragraph = $variables['paragraph'];
  $variables['limit'] = $paragraph->get('field_oe_timeline_expand')->value;
  $variables['items'] = $variables['content']['field_oe_timeline']['#items'];
}

/**
 * Implements hook_preprocess_paragraph() for oe_banner paragraph.
 */
function eic_community_preprocess_paragraph__oe_banner(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  $variables['description'] = $paragraph->get('field_oe_text')->value;

  if (!$paragraph->get('field_oe_link')->isEmpty()) {
    $link = $paragraph->get('field_oe_link')->first();
    $variables['url'] = $link->getUrl();
    $variables['label'] = $link->get('title')->getValue();
  }

  $variables['full_width'] = (bool) $paragraph->get('field_oe_banner_full_width')->value;

  // The alignment field value contains the information regarding the pattern
  // type and centering.
  $alignment = $paragraph->get('field_oe_banner_type')->value;
  [$banner_type, $banner_alignment] = explode('_', $alignment);
  // The beginning of the string determines the pattern.
  $variables['pattern'] = 'banner_' . $banner_type;
  // The end of the string determines the position.
  $variables['alignment'] = $banner_alignment;

  $variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
  if ($variant) {
    $variables['variant'] = str_replace('oe_banner_', '', $variant);
  }
  else {
    $variables['variant'] = 'default';
  }

  if ($variables['variant'] === 'default' || $variables['variant'] === 'primary') {
    return;
  }

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    return;
  }
  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct translation to display.
  $media = \Drupal::service('entity.repository')
    ->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability->addCacheableDependency($media);

  $source = $media->getSource();
  // We only support images and AV Portal photos for now.
  if (!$source instanceof MediaAvPortalSourceInterface && !$source instanceof Image) {
    $cacheability->applyTo($variables);
    return;
  }

  $field_name = $source->getConfiguration()['source_field'];
  if ($source instanceof Image && ($file_entity = $media->get($field_name)->entity)) {
    $uri = $file_entity->getFileUri();
    $cacheability->addCacheableDependency($file_entity);
  }
  elseif ($source instanceof MediaAvPortalSourceInterface) {
    $resource_ref = $media->get($field_name)->value;
    $uri = 'avportal://' . $resource_ref . '.jpg';
  }

  // The uri might be empty if the source is of type Image and the file entity
  // was deleted.
  if (empty($uri)) {
    $cacheability->applyTo($variables);
    return;
  }

  $values = [
    'src' => file_create_url($uri),
    'alt' => $source->getMetadata($media,
        'thumbnail_alt_value') ?? $media->label(),
    'name' => $media->getName(),
  ];
  $variables['image'] = ImageValueObject::fromArray($values);

  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_banner_hero(array &$variables): void {
  if ($variables['full_width'] === TRUE) {
    $variables['container_attributes'] = new Attribute(['class' => 'ecl-page-banner--full-width']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_banner_page(array &$variables): void {
  if ($variables['full_width'] === TRUE) {
    $variables['container_attributes'] = new Attribute(['class' => 'ecl-page-banner--full-width']);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function eic_community_preprocess_page(array &$variables): void {
  $variables['main_attributes'] = new Attribute([
    'class' => ['ecl-u-pb-xl'],
    'id' => ['main-content'],
  ]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_organisation_teaser__preview(
  array &$variables
): void {
  $variables['logo'] = ImageValueObject::fromArray($variables['logo']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__video_iframe__eic_community_main_content(array &$variables): void {
  // Set video aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__iframe__eic_community_main_content(array &$variables): void {
  // Set iframe aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value ?? 'custom';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add block region as a suggestion.
 */
function eic_community_theme_suggestions_block_alter(
  array &$suggestions,
  array $variables
) {
  // Blocks that are not placed in a region might not have an id (if they
  // are rendered through a block_reference field for instance).
  if (!isset($variables['elements']['#id'])) {
    return;
  }
  /** @var \Drupal\block\Entity\Block $block */
  $block = \Drupal::entityTypeManager()
    ->getStorage('block')
    ->load($variables['elements']['#id']);
  if (!$block instanceof BlockInterface || !$block->getRegion()) {
    return;
  }
  $suggestions[] = 'block__region_' . $block->getRegion();
  $suggestions[] = 'block__region_' . $block->getRegion() . '__' . $variables['elements']['#id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_ec_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_ec_footer__' . $branding;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_eu_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_eu_footer__' . $branding;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_oe_corporate_blocks_eu_footer(array &$variables) {
  $variables['logo_description'] = t('Discover more on @link', [
    '@link' => new FormattableMarkup('<a href="https://europa.eu/" class="ecl-link ecl-link--standalone">europa.eu</a>',
      []),
  ]);
}
