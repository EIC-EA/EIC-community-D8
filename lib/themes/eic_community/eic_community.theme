<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block\BlockInterface;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\media\MediaInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface;
use Drupal\eic_community\ValueObject\ImageValueObject;
use Drupal\Component\Render\FormattableMarkup;

// Define constant for the includes folder. This .theme file should contain as
// little code as possible. Instead, place theme implementations in separate
// files.
define('INCLUDES_FOLDER', 'includes');

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Scan and declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
function eic_community_scan_include_files($folder) {
  $files = scandir(__DIR__ . '/' . $folder);
  if (!empty($files)) {
    foreach (array_diff($files, ['..', '.']) as $file) {
      if (is_dir(__DIR__ . '/' . $folder . '/' . $file)) {
        eic_community_scan_include_files("$folder/$file");
      }
      else {
        eic_community_include('eic_community', "$folder/$file");
      }
    }
  }
}

/**
 * Scan and include files from preprocess folder.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_FOLDER)) {
  eic_community_scan_include_files(INCLUDES_FOLDER);
}

/**
 * Implements template_preprocess_block__eic_community_main_page_content().
 */
function eic_community_preprocess_block__eic_community_main_page_content(&$variables) {
  $variables['attributes']['class'][] = 'ecl-u-mb-2xl';
}

/**
 * Implements template_preprocess_block__eic_community_tabs().
 */
function eic_community_preprocess_block__eic_community_tabs(&$variables) {
  $variables['attributes']['class'][] = 'ecl-u-mb-2xl';
}

/**
 * Implements hook_preprocess_paragraph() for oe_social_media_follow paragraph.
 */
function eic_community_preprocess_paragraph__oe_social_media_follow(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['variant'] = $paragraph->get('field_oe_social_media_variant')->value;
  $variables['label'] = $paragraph->get('field_oe_title')->value;
  $links = $paragraph->get('field_oe_social_media_links')->getValue();
  $variables['links'] = [];
  foreach ($links as $key => $link) {
    $variables['links'][$key]['service'] = $link['link_type'];
    $variables['links'][$key]['label'] = $link['title'];
    $variables['links'][$key]['url'] = Url::fromUri($link['uri']);
  }
  if (!$paragraph->get('field_oe_social_media_see_more')->isEmpty()) {
    $other_link = $paragraph->get('field_oe_social_media_see_more')
      ->first()
      ->getValue();
    $variables['links'][] = [
      'label' => $other_link['title'],
      'url' => Url::fromUri($other_link['uri']),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_link(array &$variables): void {
  // Set default variant to 'standalone', if none given.
  $variables['variant'] = $variables['variant'] ?: 'standalone';
  $attributes = [];

  // Make sure we always have an URL object in place.
  if (is_string($variables['url'])) {
    $variables['url'] = Url::fromUserInput($variables['url']);
  }

  // Extract attributes from the URL object and set them as default.
  if ($variables['url'] instanceof Url) {
    $attributes = (array) $variables['url']->getOption('attributes');
  }

  // Add ECL link classes to attributes.
  $variables['attributes'] = new Attribute($attributes);
  $variables['attributes']->addClass('ecl-link',
    'ecl-link--' . $variables['variant']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_link__preview(array &$variables): void {
  // Pattern preview will pass along a \Drupal\Core\Render\Markup object.
  $variables['url'] = Url::fromUserInput((string) $variables['url']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_page_header__preview(array &$variables): void {
  // We are going to accept only local images for the background image of the
  // preview.
  $variables['background_image_url'] = base_path() .
    drupal_get_path('module', 'eic_community_helper') .
    '/images/' . $variables['background_image_url'];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function eic_community_preprocess_paragraph__oe_facts_figures(array &$variables): void {
  $paragraph = $variables['paragraph'];
  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }
  if (!$paragraph->get('field_oe_link')->isEmpty()) {
    $variables['view_all']['path'] = $paragraph->get('field_oe_link')
      ->first()
      ->getUrl();
    $variables['view_all']['label'] = $paragraph->get('field_oe_link')
      ->first()
      ->get('title')
      ->getValue();
  }
  $variables['items'] = [];

  /** @var \Drupal\paragraphs\Entity\Paragraph $sub_paragraph */
  $referenced_entities = $paragraph->get('field_oe_paragraphs')
    ->referencedEntities();
  foreach ($referenced_entities as $sub_paragraph) {
    // Get sub-paragraph translation.
    $sub_paragraph = \Drupal::service('entity.repository')
      ->getTranslationFromContext($sub_paragraph,
        $paragraph->language()->getId());
    $variables['items'][] = [
      'icon' => $sub_paragraph->get('field_oe_icon')->value,
      'value' => $sub_paragraph->get('field_oe_title')->value,
      'title' => $sub_paragraph->get('field_oe_subtitle')->value,
      'description' => $sub_paragraph->get('field_oe_plain_text_long')->value,
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function eic_community_preprocess_paragraph__oe_timeline(array &$variables): void {
  $paragraph = $variables['paragraph'];
  $variables['limit'] = $paragraph->get('field_oe_timeline_expand')->value;
  $variables['items'] = $variables['content']['field_oe_timeline']['#items'];
}

/**
 * Implements hook_preprocess_paragraph() for oe_banner paragraph.
 */
function eic_community_preprocess_paragraph__oe_banner(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  $variables['description'] = $paragraph->get('field_oe_text')->value;

  if (!$paragraph->get('field_oe_link')->isEmpty()) {
    $link = $paragraph->get('field_oe_link')->first();
    $variables['url'] = $link->getUrl();
    $variables['label'] = $link->get('title')->getValue();
  }

  $variables['full_width'] = (bool) $paragraph->get('field_oe_banner_full_width')->value;

  // The alignment field value contains the information regarding the pattern
  // type and centering.
  $alignment = $paragraph->get('field_oe_banner_type')->value;
  [$banner_type, $banner_alignment] = explode('_', $alignment);
  // The beginning of the string determines the pattern.
  $variables['pattern'] = 'banner_' . $banner_type;
  // The end of the string determines the position.
  $variables['alignment'] = $banner_alignment;

  $variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
  if ($variant) {
    $variables['variant'] = str_replace('oe_banner_', '', $variant);
  }
  else {
    $variables['variant'] = 'default';
  }

  if ($variables['variant'] === 'default' || $variables['variant'] === 'primary') {
    return;
  }

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    return;
  }
  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct translation to display.
  $media = \Drupal::service('entity.repository')
    ->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability->addCacheableDependency($media);

  $source = $media->getSource();
  // We only support images and AV Portal photos for now.
  if (!$source instanceof MediaAvPortalSourceInterface && !$source instanceof Image) {
    $cacheability->applyTo($variables);
    return;
  }

  $field_name = $source->getConfiguration()['source_field'];
  if ($source instanceof Image && ($file_entity = $media->get($field_name)->entity)) {
    $uri = $file_entity->getFileUri();
    $cacheability->addCacheableDependency($file_entity);
  }
  elseif ($source instanceof MediaAvPortalSourceInterface) {
    $resource_ref = $media->get($field_name)->value;
    $uri = 'avportal://' . $resource_ref . '.jpg';
  }

  // The uri might be empty if the source is of type Image and the file entity
  // was deleted.
  if (empty($uri)) {
    $cacheability->applyTo($variables);
    return;
  }

  $values = [
    'src' => file_create_url($uri),
    'alt' => $source->getMetadata($media,
        'thumbnail_alt_value') ?? $media->label(),
    'name' => $media->getName(),
  ];
  $variables['image'] = ImageValueObject::fromArray($values);

  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_banner_hero(array &$variables): void {
  if ($variables['full_width'] === TRUE) {
    $variables['container_attributes'] = new Attribute(['class' => 'ecl-page-banner--full-width']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_banner_page(array &$variables): void {
  if ($variables['full_width'] === TRUE) {
    $variables['container_attributes'] = new Attribute(['class' => 'ecl-page-banner--full-width']);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function eic_community_preprocess_page(array &$variables): void {
  $variables['main_attributes'] = new Attribute([
    'class' => ['ecl-u-pb-xl'],
    'id' => ['main-content'],
  ]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_pattern_organisation_teaser__preview(
  array &$variables
): void {
  $variables['logo'] = ImageValueObject::fromArray($variables['logo']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__video_iframe__eic_community_main_content(array &$variables): void {
  // Set video aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__iframe__eic_community_main_content(array &$variables): void {
  // Set iframe aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value ?? 'custom';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add block region as a suggestion.
 */
function eic_community_theme_suggestions_block_alter(
  array &$suggestions,
  array $variables
) {
  // Blocks that are not placed in a region might not have an id (if they
  // are rendered through a block_reference field for instance).
  if (!isset($variables['elements']['#id'])) {
    return;
  }
  /** @var \Drupal\block\Entity\Block $block */
  $block = \Drupal::entityTypeManager()
    ->getStorage('block')
    ->load($variables['elements']['#id']);
  if (!$block instanceof BlockInterface || !$block->getRegion()) {
    return;
  }
  $suggestions[] = 'block__region_' . $block->getRegion();
  $suggestions[] = 'block__region_' . $block->getRegion() . '__' . $variables['elements']['#id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_ec_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_ec_footer__' . $branding;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_eu_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_eu_footer__' . $branding;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_oe_corporate_blocks_eu_footer(array &$variables) {
  $variables['logo_description'] = t('Discover more on @link', [
    '@link' => new FormattableMarkup('<a href="https://europa.eu/" class="ecl-link ecl-link--standalone">europa.eu</a>',
      []),
  ]);
}
