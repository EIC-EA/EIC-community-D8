<?php

/**
 * @file
 * Functions to support theming.
 */

// Define constant for the includes folder. This .theme file should contain as
// little code as possible. Instead, place theme implementations in separate
// files.
define('INCLUDES_FOLDER', 'includes');

use CommerceGuys\Addressing\AddressFormat\AddressField;
use Drupal\address\FieldHelper;
use Drupal\Core\Datetime\DrupalDateTime;
use \Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function eic_community_theme() {
  $theme_path = drupal_get_path('theme', 'eic_community');

  return [
    'eic_community_extended_list' => [
      'template' => 'extended-list',
      'path' => $theme_path . '/patterns/compositions/extended-list',
      'variables' => [
        'extra_classes' => NULL,
        'title' => NULL,
        'description' => NULL,
        'items' => NULL,
        'group' => NULL,
      ],
    ],
    'eic_community_well' => [
      'template' => 'well',
      'path' => $theme_path . '/patterns/components',
      'variables' => [
        'extra_classes' => NULL,
        'content' => NULL,
      ],
    ],
    'eic_community_harmonica' => [
      'template' => 'harmonica',
      'path' => $theme_path . '/patterns/components',
      'variables' => [
        'extra_classes' => NULL,
        'extra_attributes' => NULL,
        'title' => NULL,
        'icon' => NULL,
        'icon_file_path' => NULL,
        'description' => NULL,
        'items' => NULL,
      ],
    ],
    'eic_community_author' => [
      'template' => 'author',
      'path' => $theme_path . '/patterns/components',
      'variables' => [
        'label_element' => NULL,
        'name' => NULL,
        'size' => NULL,
        'updates' => NULL,
        'display_avatar_only' => NULL,
        'description' => NULL,
        'label_classes' => NULL,
        'path' => NULL,
        'actions' => NULL,
        'image' => NULL,
      ],
    ],
    'eic_community_timestamp' => [
      'template' => 'timestamp',
      'path' => $theme_path . '/patterns/components',
      'variables' => [
        'extra_classes' => NULL,
        'icon_file_path' => NULL,
        'label' => NULL,
      ],
    ],
  ];
}

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Scan and declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
function eic_community_scan_include_files($folder) {
  $files = scandir(__DIR__ . '/' . $folder);
  if (!empty($files)) {
    foreach (array_diff($files, ['..', '.']) as $file) {
      if (is_dir(__DIR__ . '/' . $folder . '/' . $file)) {
        eic_community_scan_include_files("$folder/$file");
      }
      else {
        eic_community_include('eic_community', "$folder/$file");
      }
    }
  }
}

/**
 * Scan and include files from preprocess folder.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_FOLDER)) {
  eic_community_scan_include_files(INCLUDES_FOLDER);
}

/**
 * Implements hook_preprocess_group__TYPE.
 */
function eic_community_preprocess_group__event(&$variables) {
  _render_event_detail_page($variables, $variables['group']);
}

/**
 * Implements hook_preprocess_node__TYPE.
 */
function eic_community_preprocess_node__event(&$variables) {
  _render_event_detail_page($variables, $variables['node']);
}

/**
 * Generate render array for the event detail page (group type and node type).
 *
 * @param $variables
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function _render_event_detail_page(&$variables, EntityInterface $entity) {
  $fields_map = [
    'node' => [
      'languages' => 'field_language',
      'documents' => 'field_document_media',
    ],
    'group' => [
      'languages' => 'field_vocab_language',
      'documents' => 'field_documents',
    ],
  ];

  $entity_type = $entity->getEntityTypeId();

  _eic_community_display_topics($variables);
  _eic_community_display_flags($variables);

  $location = $entity->get('field_location')->getValue();
  $location_formatted = '';

  if (!empty($location)) {
    $location = reset($location);
    $location_formatted = $location[FieldHelper::getPropertyName(AddressField::ADDRESS_LINE1)] . ' ' . $location[$location[FieldHelper::getPropertyName(AddressField::ADDRESS_LINE2)]] . '\n';
    $location_formatted .= $location[FieldHelper::getPropertyName(AddressField::POSTAL_CODE)] . ' ' . $location[FieldHelper::getPropertyName(AddressField::LOCALITY)];
  }

  $allowed_values_location_type = eic_field_location_type_allowed_values();

  $location_types = array_map(function ($item) use ($allowed_values_location_type) {
    return array_key_exists($item['value'], $allowed_values_location_type) ?
      strtolower($allowed_values_location_type[$item['value']]) :
      '';
  }, $entity->get('field_location_type')->getValue());

  $dates = $entity->get('field_date_range')->getValue();
  $from_date = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $dates[0]['value']);
  $end_date = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $dates[0]['end_value']);

  $action = [];

  // We only show signup in global event (group type: event).
  if ('group' === $entity_type) {
    $action = [
      'title' => 'Sign up to this event',
      'text' => 'Get notified of the latest changes and take part in the discussion linked to this event.',
      'action' => [
        'label' => 'Sign up now',
        'url' => 'https://www.google.com',
      ],
    ];
  }

  $event_infos = [
    'icon_file_path' => $variables['eic_icon_path'],
    'title' => t('Event details', [], ['eic_community']),
    'action' => $action,
    'items' => [
      [
        'content' => $location_formatted,
        'icon' => [
          'type' => 'custom',
          'name' => 'map-marker',
        ],
      ],
      [
        'content' => ucfirst(implode($location_types, ' & ')),
        'icon' => [
          'type' => 'custom',
          'name' => 'tag',
        ],
      ],
      [
        'content' => 'From ' . $from_date->format('d/m/Y H\hi') . ' to ' . $end_date->format('d/m/Y H\hi'),
        'icon' => [
          'type' => 'custom',
          'name' => 'calendar',
        ],
      ],
      [
        'content' => implode(', ', array_map(function (\Drupal\taxonomy\Entity\Term $term) {
          return $term->label();
        }, $entity->get($fields_map[$entity_type]['languages'])->referencedEntities())),
        'icon' => [
          'type' => 'custom',
          'name' => 'glob',
        ],
      ],
    ],
  ];

  if ($social_links = $entity->get('field_social_links')->getValue()) {
    $socials_platform_mapping = [
      'facebook' => [
        'url' => 'https://www.facebook.com/',
        'icon' => 'facebook-current',
      ],
      'twitter' => [
        'url' => 'https://www.twitter.com/',
        'icon' => 'twitter',
      ],
      'linkedin' => [
        'url' => 'https://www.linkedin.com/in/',
        'icon' => 'linkedin',
      ],
    ];

    foreach ($social_links as $social_link) {
      $event_infos['items'][] = [
        'content' => ucfirst($social_link['social']),
        'url' => $socials_platform_mapping[$social_link['social']]['url'] . $social_link['link'],
        'icon' => [
          'type' => 'custom',
          'name' => $socials_platform_mapping[$social_link['social']]['icon'],
        ],
      ];
    }
  }

  if ($website_url = $entity->get('field_website_url')->getString()) {
    $event_infos['items'][] = [
      'content' => $website_url,
      'url' => $website_url,
      'icon' => [
        'type' => 'custom',
        'name' => 'link',
      ],
    ];
  }

  $variables['event_infos'] = $event_infos;
  // Provide the Social Share block.
  if ($share_block = _eic_community_get_social_share_block()) {
    $variables['social_share'] = $share_block;
  }

  $files = $entity->get($fields_map[$entity_type]['documents'])->referencedEntities();
  $files_list = [];

  foreach ($files as $file) {
    $download = \Drupal\file\Entity\File::load($file->field_media_file->getValue()[0]['target_id']);
    $download_url = \Drupal\eic_media\MediaHelper::formatMediaDownloadLink($file)
      ->toString();
    $files_list[] = [
      'name' => $file->getName(),
      'stats' => [
        [
          'hide_label' => TRUE,
          'icon' => [
            'name' => 'download',
            'type' => 'custom',
          ],
          'label' => t('downloads'),
          // @todo Add statistics value
          'value' => \Drupal::service('eic_media_statistics.entity_file_download_count')
            ->getFileDownloads($file),
        ],
        [
          'hide_label' => TRUE,
          'value' => format_size($download->get('filesize')->getString()),
        ],
      ],
      'mime_type' => substr(strrchr($download->get('filemime')
        ->getString(), '/'), 1),
      'path' => $download_url,
    ];
  }

  $variables['file_list'] = [
    'title' => t('Event files', ['%count' => count($files)]),
    'body' => '',
    'files' => $files_list,
    'icon_file_path' => $variables['eic_icon_path'],
    'download' => t('Download'),
  ];
}
