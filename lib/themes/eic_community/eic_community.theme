<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block\BlockInterface;
use Drupal\Component\Render\FormattableMarkup;

// Define constant for the includes folder. This .theme file should contain as
// little code as possible. Instead, place theme implementations in separate
// files.
define('INCLUDES_FOLDER', 'includes');

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Scan and declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
function eic_community_scan_include_files($folder) {
  $files = scandir(__DIR__ . '/' . $folder);
  if (!empty($files)) {
    foreach (array_diff($files, ['..', '.']) as $file) {
      if (is_dir(__DIR__ . '/' . $folder . '/' . $file)) {
        eic_community_scan_include_files("$folder/$file");
      }
      else {
        eic_community_include('eic_community', "$folder/$file");
      }
    }
  }
}

/**
 * Scan and include files from preprocess folder.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_FOLDER)) {
  eic_community_scan_include_files(INCLUDES_FOLDER);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__video_iframe__eic_community_main_content(array &$variables): void {
  // Set video aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_field__media__oe_media_iframe__iframe__eic_community_main_content(array &$variables): void {
  // Set iframe aspect ratio when rendering "eic_community_main_content" display
  // mode.
  $variables['ratio'] = $variables['element']['#object']->get('oe_media_iframe_ratio')->value ?? 'custom';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add block region as a suggestion.
 */
function eic_community_theme_suggestions_block_alter(
  array &$suggestions,
  array $variables
) {
  // Blocks that are not placed in a region might not have an id (if they
  // are rendered through a block_reference field for instance).
  if (!isset($variables['elements']['#id'])) {
    return;
  }
  /** @var \Drupal\block\Entity\Block $block */
  $block = \Drupal::entityTypeManager()
    ->getStorage('block')
    ->load($variables['elements']['#id']);
  if (!$block instanceof BlockInterface || !$block->getRegion()) {
    return;
  }
  $suggestions[] = 'block__region_' . $block->getRegion();
  $suggestions[] = 'block__region_' . $block->getRegion() . '__' . $variables['elements']['#id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_ec_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_ec_footer__' . $branding;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eic_community_theme_suggestions_oe_corporate_blocks_eu_footer_alter(
  array &$suggestions,
  array $variables
) {
  $branding = theme_get_setting('branding') ?? 'core';
  $suggestions[] = 'oe_corporate_blocks_eu_footer__' . $branding;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_oe_corporate_blocks_eu_footer(array &$variables) {
  $variables['logo_description'] = t('Discover more on @link', [
    '@link' => new FormattableMarkup('<a href="https://europa.eu/" class="ecl-link ecl-link--standalone">europa.eu</a>',
      []),
  ]);
}
