<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Render\Element;
use Drupal\oe_theme\ValueObject\ImageValueObject;

// Define constant variable for the `./includes/preprocess` directory.
define('INCLUDES_PREPROCESS_FOLDER', 'includes/preprocess');

/**
 * Includes a theme file.
 *
 * @param string $theme
 *   Name of the theme to use for base path.
 * @param string $path
 *   Path relative to $theme.
 */
function eic_community_include($theme, $path) {
  $theme_path = drupal_get_path('theme', $theme);
  if ($theme_path && ($file = DRUPAL_ROOT . '/' . $theme_path . '/' . $path) && file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'inc') {
    include_once $file;
  }
}

/**
 * Declare various [pre]process/hook functions.
 *
 * All [pre]process/hook functions must live (via include) inside this
 * file so they are properly detected when drupal_alter() is invoked.
 */
if (is_dir(__DIR__ . '/' . INCLUDES_PREPROCESS_FOLDER)) {
  $preprocess_folders = ['', 'blocks', 'content', 'paragraphs'];

  foreach ($preprocess_folders as $folder) {
    $files = scandir(__DIR__ . '/' . INCLUDES_PREPROCESS_FOLDER . '/' . $folder);
    if (!empty($files)) {
      foreach ($files as $file) {
        if (empty($folder)) {
          eic_community_include('eic_community', INCLUDES_PREPROCESS_FOLDER . '/' . $file);
        }
        else {
          eic_community_include('eic_community', INCLUDES_PREPROCESS_FOLDER . '/' . $folder . '/' . $file);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for all paragraph types.
 */
function eic_community_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->bundle()) {
    case 'text_and_media_content':
      // We need to force running the preprocess hook because paragraphs view
      // mode doesn't triger.
      if (!in_array($variables['view_mode'], ['default', 'media_left'])) {
        eic_community_preprocess_paragraph__text_and_media_content($variables);
      }
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph() for text_and_media_content paragraph.
 */
function eic_community_preprocess_paragraph__text_and_media_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $items = [];

  // Get body text.
  if (!$paragraph->get('field_body')->isEmpty()) {
    $items['content'] = $paragraph->get('field_body')->view();
  }

  // Get call to action link.
  if (!$paragraph->get('field_cta')->isEmpty()) {
    $link = $paragraph->get('field_cta')->first()->getValue();
    $items['call_to_action'] = [
      'link' => [
        'label' => $link['title'],
        'path' => $link['uri'],
      ],
    ];
  }

  // Add body and call to action items.
  $variables['paragraph_content']['items'] = [$items];

  // Add media field.
  if (!$paragraph->get('field_media')->isEmpty()) {
    /** @var \Drupal\media\Entity\Media $media */
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_media')->entity, $paragraph->language()->getId());

    switch ($media->bundle()) {
      case 'image':
        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $variables['paragraph_content']['media'] = [
          'image' => $image_item->getSource(),
          'alt' => $image_item->getAlt(),
        ];
        break;

    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for full_media_content paragraph.
 */
function eic_community_preprocess_paragraph__full_media_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->get('field_media')->isEmpty()) {
    /** @var \Drupal\media\Entity\Media $media */
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_media')->entity, $paragraph->language()->getId());

    // Add media to the theme variables.
    switch ($media->bundle()) {
      case 'image':
        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $variables['paragraph_content']['image'] = $image_item->getSource();
        $variables['paragraph_content']['alt'] = $image_item->getAlt();
        break;

      case 'remote_video':
        $variables['paragraph_content']['embedded_media'] = $media->get('oe_media_oembed_video')->view('oe_theme_main_content');
        break;

    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for quote paragraph.
 */
function eic_community_preprocess_paragraph__quote(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->get('paragraph_view_mode')->value) {
    case 'external_person':
      // Add external person name.
      if (!$paragraph->get('field_name')->isEmpty()) {
        $variables['paragraph_content']['author'] = $paragraph->get('field_name')->value;
      }

      // Add external person image.
      if (!$paragraph->get('field_media')->isEmpty()) {
        /** @var \Drupal\media\Entity\Media $media */
        $media = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_media')->entity, $paragraph->language()->getId());

        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $variables['paragraph_content']['image'] = [
          'src' => $image_item->getSource(),
          'alt' => $image_item->getAlt(),
        ];
      }
      break;

    case 'platform_member':
      if (!$paragraph->get('field_user_ref')->isEmpty()) {
        /** @var \Drupal\user\UserInterface $user */
        $user = $paragraph->get('field_user_ref')->entity;

        $full_name = [];

        // Gets first name.
        if (!$user->get('field_first_name')->isEmpty()) {
          $full_name[] = $user->get('field_first_name')->value;
        }
        // Gets last name.
        if (!$user->get('field_last_name')->isEmpty()) {
          $full_name[] = $user->get('field_last_name')->value;
        }
        // Add user full name to the theme variables.
        if (!empty($full_name)) {
          $variables['paragraph_content']['author'] = implode(' ', $full_name);
        }

        // Add user image.
        if (!$user->get('field_media')->isEmpty()) {
          /** @var \Drupal\media\Entity\Media $media */
          $media = $user->get('field_media')->entity;

          $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
          $variables['paragraph_content']['image'] = [
            'src' => $image_item->getSource(),
            'alt' => $image_item->getAlt(),
          ];
        }
      }
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph() for banner paragraph.
 */
function eic_community_preprocess_paragraph__banner(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Adds paragraph variables from field_banner.
  if (!$paragraph->get('field_banner')->isEmpty()) {
    /** @var \Drupal\fragments\Entity\FragmentInterface $fragment_banner */
    $fragment_banner = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_banner')->entity, $paragraph->language()->getId());

    // Sets default extra classes.
    $extra_classes = ['ecl-editable-hero-banner--is-wide'];

    // Sets background classes.
    if (!$fragment_banner->get('field_background_color')->isEmpty()) {
      $extra_classes[] = "ecl-editable-hero-banner--is-{$fragment_banner->get('field_background_color')->value}";
    }

    // Adds banner image.
    if (!$fragment_banner->get('field_background_image')->isEmpty()) {
      /** @var \Drupal\media\Entity\Media $media */
      $media = \Drupal::service('entity.repository')->getTranslationFromContext($fragment_banner->get('field_background_image')->entity, $fragment_banner->language()->getId());

      $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
      $variables['paragraph_content']['image'] = $image_item->getSource();
    }

    // Adds extra classes.
    if (!empty($extra_classes)) {
      $variables['paragraph_content']['extra_classes'] = implode(' ', $extra_classes);
    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for tiles content paragraph.
 */
function eic_community_preprocess_paragraph__tiles_content(array &$variables) {
  // Adds card items content.
  foreach (Element::children($variables['content']['field_tiles']) as $index) {
    $variables['paragraph_content']['items'][$index]['content'] = &$variables['content']['field_tiles'][$index];
  }
}

/**
 * Implements hook_preprocess_fragment() for banner fragment.
 */
function eic_community_preprocess_fragment__banner(array &$variables) {
  // Adds h2 wrapper around title.
  $variables['content']['title'][0]['#prefix'] = '<h2>';
  $variables['content']['title'][0]['#suffix'] = '</h2>';

  // Massage field_cta_link in order to add extra ECL link classes.
  foreach (Element::children($variables['content']['field_cta_link']) as $index) {
    $variables['content']['field_cta_link'][$index]['#options']['attributes']['class'] = ['ecl-link--cta'];
  }
}

/**
 * Implements hook_preprocess_field() for link fields.
 */
function eic_community_preprocess_field__link(array &$variables) {
  foreach ($variables['items'] as &$value) {
    if (isset($value['content']['#options']['attributes']['class'])) {
      array_unshift($value['content']['#options']['attributes']['class'], 'ecl-link', 'ecl-link--default');
    }
    else {
      $value['content']['#options']['attributes']['class'] = [
        'ecl-link',
        'ecl-link--default',
      ];
    }
  }
}

/**
 * Implements hook_preprocess_block() for all blocks.
 */
function eic_community_preprocess_block(array &$variables) {
  if ($variables['base_plugin_id'] == 'block_content') {
    /** @var \Drupal\block_content\Entity\BlockContent $block_content */
    $block_content = $variables['content']['#block_content'];

    // Initializes cache tags.
    $cache_tags = $block_content->getCacheTags();

    switch ($block_content->bundle()) {
      case 'page_banner':
        // Preprocess variables for page_banner block.
        if (!$block_content->get('field_media')->isEmpty()) {
          /** @var \Drupal\media\Entity\Media $media */
          $media = \Drupal::service('entity.repository')->getTranslationFromContext($block_content->get('field_media')->entity, $block_content->language()->getId());

          switch ($media->bundle()) {
            case 'image':
              $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
              $variables['hero']['image'] = $image_item->getSource();
              break;

          }
        }
        break;

      case 'cta_tiles':
        // Preprocess variables for cta_tiles block.
        if (!$block_content->get('field_cta_tiles')->isEmpty()) {
          /** @var \Drupal\paragraphs\ParagraphInterface[] $paragraphs */
          $paragraphs = $block_content->get('field_cta_tiles')->referencedEntities();

          foreach ($paragraphs as $paragraph) {
            $paragraph_translation = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $block_content->language()->getId());
            $link = $paragraph_translation->get('field_cta_link')->first()->getValue();
            $cache_tags = Cache::mergeTags($cache_tags, $paragraph->getCacheTags());

            // Adds CTA Tiles to the theme variables.
            $variables['block_content']['items'][] = [
              'title' => $paragraph_translation->get('field_title')->value,
              'description' => $paragraph_translation->get('field_body')->value,
              'actions' => [
                [
                  'link' => [
                    'label' => $link['title'],
                    'path' => $link['uri'],
                  ],
                  'extra_classes' => "ecl-link--button ecl-link--button-{$link['link_type']}",
                ],
              ],
            ];
          }
        }
        break;

      case 'facts_figures':
        // Preprocess variables for facts_figures block.
        if (!$block_content->get('field_facts_figures')->isEmpty()) {
          /** @var \Drupal\eic_statistics\StatisticsStorageInterface $eic_statistics_storage */
          $eic_statistics_storage = \Drupal::service('eic_statistics.storage');

          /** @var \Drupal\fragments\Entity\FragmentInterface[] $fragments */
          $fragments = $block_content->get('field_facts_figures')->referencedEntities();

          // Adds each fact and figure to the theme variables.
          foreach ($fragments as $fragment) {
            $fragment_translation = \Drupal::service('entity.repository')->getTranslationFromContext($fragment, $block_content->language()->getId());
            $cache_tags = Cache::mergeTags($cache_tags, $fragment->getCacheTags());

            // Extracts the entity type and bundle from
            // the value of field_fact_figure_type.
            $entity_info = explode('__', $fragment_translation->get('field_fact_figure_type')->getString());
            $entity_type = reset($entity_info);
            $bundle = end($entity_info);

            switch ($entity_type) {
              case 'user':
                $counter = $eic_statistics_storage->getEntityCounter($entity_type);
                $cache_tags[] = $eic_statistics_storage->getEntityCounterCacheTag($entity_type);
                break;

              default:
                $counter = $eic_statistics_storage->getEntityCounter($entity_type, $bundle);
                $cache_tags[] = $eic_statistics_storage->getEntityCounterCacheTag($entity_type, $bundle);
                break;

            }

            $variables['block_content']['items'][] = [
              'title' => eic_field_fact_figure_type_allowed_values()[$fragment_translation->get('field_fact_figure_type')->getString()],
              'description' => $fragment_translation->get('field_body')->value,
              'value' => $counter,
              'fact_figure_type' => $fragment_translation->get('field_fact_figure_type')->getString(),
            ];
          }
        }
        break;

      case 'social_media':
        // Adds social media link allowed values.
        $social_media_links = $block_content->get('field_social_media_links');
        $provider = $social_media_links->getFieldDefinition()
          ->getFieldStorageDefinition()
          ->getOptionsProvider('link_type', $social_media_links->getEntity());
        $variables['social_media_link_types'] = $provider->getPossibleOptions();
        break;

      case 'latest_news_stories':
        $nodes = [];

        // Adds News/Stories to the array of nodes to process.
        if (!$block_content->get('field_articles')->isEmpty()) {
          $nodes = $block_content->get('field_articles')->referencedEntities();
        }

        // Adds featured News/Story to the beginning of array of nodes.
        if (!$block_content->get('field_featured_article')->isEmpty()) {
          array_unshift($nodes, $block_content->get('field_featured_article')->entity);
        }

        // Process the array of nodes and add it to the theme variables.
        foreach ($nodes as $node) {
          $node_translation = \Drupal::service('entity.repository')->getTranslationFromContext($node, $block_content->language()->getId());
          $node_author = $node_translation->getOwner();
          $time_ago = \Drupal::service('date.formatter')->formatTimeDiffSince($node_translation->get('published_at')->value, ['granularity' => 1]);

          $item = [
            'title' => $node_translation->label(),
            'description' => $node_translation->get('field_introduction')->value,
            'path' => $node_translation->toUrl()->toString(),
            'type' => [
              'label' => $node_translation->type->entity->label(),
              'icon' => [
                'name' => $node_translation->bundle(),
                'type' => 'custom',
              ],
            ],
            'timestamp' => [
              'label' => t('@time ago', ['@time' => $time_ago]),
            ],
            'author' => [
              'author' => $node_author->get('field_full_name')->value,
              'path' => $node_author->toUrl()->toString(),
            ],
          ];

          if (!$node_translation->get('field_header_visual')->isEmpty()) {
            /** @var \Drupal\media\Entity\Media $media */
            $media = \Drupal::service('entity.repository')->getTranslationFromContext($node_translation->get('field_header_visual')->entity, $block_content->language()->getId());
            $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
            $item['media'] = [
              'image' => $image_item->getSource(),
            ];
          }

          $variables['news_stories_items'][] = $item;

          // Add node cache tags.
          $cache_tags[] = Cache::mergeTags($cache_tags, $node->getCacheTags());
        }
        break;

    }

    // Adds cache tags.
    $variables['#cache']['tags'] = $cache_tags;
  }
}
