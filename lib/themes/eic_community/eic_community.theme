<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\file\Entity\File;
use Drupal\comment\Entity\Comment;
use Drupal\media\Entity\Media;
use Drupal\oe_theme\ValueObject\ImageValueObject;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_preprocess().
 */
function eic_community_preprocess(&$variables) {
  $variables['eic_images_path'] = base_path() . drupal_get_path('theme', 'eic_community') . '/dist/images';
  $variables['eic_icon_path'] = $variables['eic_images_path'] . '/sprite/custom/sprites/custom.svg';
  $variables['eic_logo_path'] = $variables['eic_images_path'] . '/logo';
  $variables['eic_social_icon_path'] = $variables['eic_images_path'] . '/social-icons/sprites/icons-social.svg';
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function eic_community_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Adds suggestions for the front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    if (\Drupal::currentUser()->isAnonymous()) {
      $suggestions[] = 'page__front__anonymous';
    }
  }
}

/**
 * Implements hook_preprocess_node() for page node.
 */
function eic_community_preprocess_node__page(array &$variables) {
  /** @var \Drupal\Core\Entity\EntityInterface $node */
  $node = $variables['node'];

  // Add node title.
  $variables['introduction_header'] = [
    'title' => $node->label(),
  ];

  // Add subtitle text.
  if (!$node->get('field_subtitle')->isEmpty()) {
    $variables['introduction_header']['meta'] = [
      ['label' => $node->get('field_subtitle')->value],
    ];
  }

  // Add call to action link.
  if (!$node->get('field_page_cta')->isEmpty()) {
    $variables['introduction_header']['call_to_action'] = [
      'link' => [
        'label' => $node->get('field_page_cta')->first()->get('title')->getValue() ?? '',
        'path' => $node->get('field_page_cta')->first()->getUrl()->toUriString(),
      ],
    ];
  }

  // Add media image.
  if (!$node->get('field_image')->isEmpty()) {
    /** @var \Drupal\media\Entity\Media $media */
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($node->get('field_image')->entity, $node->language()->getId());

    switch ($media->bundle()) {
      case 'image':
        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $variables['introduction_header']['media'] = [
          'image' => $image_item->getSource(),
          'alt' => $image_item->getAlt(),
        ];
        break;

    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for full_text_content paragraph.
 */
function eic_community_preprocess_paragraph__full_text_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Get title text.
  if (!$paragraph->get('field_title')->isEmpty()) {
    $variables['paragraph_content']['title'] = $paragraph->get('field_title')->value;
  }

  // Get body text.
  if (!$paragraph->get('field_body')->isEmpty()) {
    $variables['paragraph_content']['items'] = [
      ['content' => $paragraph->get('field_body')->view()],
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph() for text_and_media_content paragraph.
 */
function eic_community_preprocess_paragraph__text_and_media_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $items = [];

  // Get body text.
  if (!$paragraph->get('field_body')->isEmpty()) {
    $items['content'] = $paragraph->get('field_body')->view();
  }

  // Get call to action link.
  if (!$paragraph->get('field_cta')->isEmpty()) {
    $link = $paragraph->get('field_cta')->first()->getValue();
    $items['call_to_action'] = [
      'link' => [
        'label' => $link['title'],
        'path' => $link['uri'],
      ],
    ];
  }

  // Add body and call to action items.
  $variables['paragraph_content']['items'] = [$items];

  // Add media field.
  if (!$paragraph->get('field_media')->isEmpty()) {
    /** @var \Drupal\media\Entity\Media $media */
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_media')->entity, $paragraph->language()->getId());

    switch ($media->bundle()) {
      case 'image':
        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $variables['paragraph_content']['media'] = [
          'image' => $image_item->getSource(),
          'alt' => $image_item->getAlt(),
        ];
        break;

    }
  }
}

/**
 * Implements hook_preprocess_paragraph() for full_media_content paragraph.
 */
function eic_community_preprocess_paragraph__full_media_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->get('field_media')->isEmpty()) {
    /** @var \Drupal\media\Entity\Media $media */
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph->get('field_media')->entity, $paragraph->language()->getId());

    $variables['paragraph_content'] = [
      'description' => FALSE,
    ];

    switch ($media->bundle()) {
      case 'image':
        $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
        $media = [
          'image' => $image_item->getSource(),
          'alt' => $image_item->getAlt(),
        ];
        break;

      case 'remote_video':
        $media = [
          'embedded_media' => $media->get('oe_media_oembed_video')->view('oe_theme_main_content'),
        ];
        break;

    }

    // Add media to the theme variables.
    $variables['paragraph_content'] = array_merge($variables['paragraph_content'], $media);

    // Add media caption.
    if (!$paragraph->get('field_media_caption')->isEmpty()) {
      $variables['paragraph_content']['description'] = $paragraph->get('field_media_caption')->value;
    }
  }
}

/**
 * Implements hook_preprocess_block() for all blocks.
 */
function eic_community_preprocess_block(array &$variables) {
  if ($variables['base_plugin_id'] == 'block_content') {
    /** @var \Drupal\block_content\Entity\BlockContent $block_content */
    $block_content = $variables['content']['#block_content'];

    switch ($block_content->bundle()) {
      case 'page_banner':
        // Preprocess variables for page_banner block.
        if (!$block_content->get('field_media')->isEmpty()) {
          /** @var \Drupal\media\Entity\Media $media */
          $media = \Drupal::service('entity.repository')->getTranslationFromContext($block_content->get('field_media')->entity, $block_content->language()->getId());

          switch ($media->bundle()) {
            case 'image':
              $image_item = ImageValueObject::fromImageItem($media->get('oe_media_image')->first());
              $variables['hero']['image'] = $image_item->getSource();
              break;

          }
        }
        break;

      case 'cta_tiles':
        // Preprocess variables for cta_tiles block.
        if (!$block_content->get('field_cta_tiles')->isEmpty()) {
          /** @var \Drupal\paragraphs\ParagraphInterface[] $paragraphs */
          $paragraphs = $block_content->get('field_cta_tiles')->referencedEntities();

          foreach ($paragraphs as $key => $paragraph) {
            $paragraph_translation = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $block_content->language()->getId());
            $link = $paragraph_translation->get('field_cta_link')->first()->getValue();

            // Adds default cta link classes.
            $extra_classes = 'ecl-link--button ecl-link--button-primary';

            // Adds extra classes for the first cta link.
            if ($key === 0) {
              $extra_classes = 'ecl-link--button ecl-link--button-call';
            }

            // Adds CTA Tiles to the theme variables.
            $variables['block_content']['items'][] = [
              'title' => $paragraph_translation->get('field_title')->value,
              'description' => $paragraph_translation->get('field_body')->value,
              'actions' => [
                [
                  'link' => [
                    'label' => $link['title'],
                    'path' => $link['uri'],
                  ],
                  'extra_classes' => $extra_classes,
                ],
              ],
            ];
          }
        }
        break;

      case 'facts_figures':
        // Preprocess variables for facts_figures block.
        if (!$block_content->get('field_facts_figures')->isEmpty()) {
          /** @var \Drupal\eic_statistics\StatisticsStorageInterface $eic_statistics_storage */
          $eic_statistics_storage = \Drupal::service('eic_statistics.storage');

          /** @var \Drupal\fragments\Entity\FragmentInterface[] $fragments */
          $fragments = $block_content->get('field_facts_figures')->referencedEntities();

          // Adds each fact and figure to the theme variables.
          foreach ($fragments as $key => $fragment) {
            $fragment_translation = \Drupal::service('entity.repository')->getTranslationFromContext($fragment, $block_content->language()->getId());

            // Extracts the entity type and bundle from
            // the value of field_fact_figure_type.
            $entity_info = explode('__', $fragment_translation->get('field_fact_figure_type')->getString());
            $entity_type = reset($entity_info);
            $bundle = end($entity_info);

            switch ($entity_type) {
              case 'user':
                $counter = $eic_statistics_storage->getEntityCounter($entity_type);
                $cache_tag = $eic_statistics_storage->getEntityCounterCacheTag($entity_type);
                break;

              default:
                $counter = $eic_statistics_storage->getEntityCounter($entity_type, $bundle);
                $cache_tag = $eic_statistics_storage->getEntityCounterCacheTag($entity_type, $bundle);
                break;

            }

            $variables['block_content']['items'][] = [
              'title' => eic_field_fact_figure_type_allowed_values()[$fragment_translation->get('field_fact_figure_type')->getString()],
              'description' => $fragment_translation->get('field_body')->value,
              'value' => $counter,
              'fact_figure_type' => $fragment_translation->get('field_fact_figure_type')->getString(),
            ];
            // Adds cache tag for the fact and figure.
            $variables['#cache']['tags'][] = $cache_tag;
          }
        }
        break;

    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_comment(&$variables) {
  $author = User::load($variables['author_id']);
  $current_user = $variables['user'];
  $author_image = _get_profile_image_array($author);

  $comment = $variables['comment'];
  $comment_origin = NULL;
  if ($comment->pid->target_id !== NULL) {
    $comment_origin_entity = Comment::load($comment->pid->target_id);
    $comment_origin_author = User::load($comment_origin_entity->getOwnerId());
    $comment_origin = [
      'author' => [
        'author' => $comment_origin_author->get("field_full_name")->value,
      ],
      'comment_id' => $comment_origin_entity->id(),
      'is_owner' => $current_user->id() == $comment_origin_entity->getOwnerId(),
    ];
  }

  $comment_reply = Url::fromRoute('comment.reply', [
    'entity_type' => $comment
      ->getCommentedEntityTypeId(),
    'entity' => $comment
      ->getCommentedEntityId(),
    'field_name' => $comment
      ->getFieldName(),
    'pid' => $comment
      ->id(),
  ]);

  $variables['comment'] = [
    'author' => [
      'author' => $author->get('field_full_name')->getString(),
      'path' => '',
      'image' => $author_image,
    ],
    'comment' => $comment->comment_body->value,
    'comment_id' => $comment->cid->value,
    'comment_origin' => $comment_origin,
    'is_owner' => $current_user->id() == $comment->getOwnerId(),
    'edit_path' => $comment->toUrl('edit-form'),
    'remove_path' => $comment->toUrl('delete-form'),
    'reply_path' => $comment_reply->toString(),
    'timestamp' => $comment->getCreatedTime(),
    'user' => $current_user,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function eic_community_preprocess_form(&$variables) {
  if ($variables['element']['#id'] == 'comment-form') {
    $author = User::load($variables['user']->id());
    $author_image = _get_profile_image_array($author);

    $variables['comment_form']['author'] = [
      'author' => $author->get('field_full_name')->getString(),
      'path' => '',
      'image' => $author_image,
    ];
  }
}

/**
 * Creates image array for twig templates.
 *
 * @param Drupal\Core\Entity\EntityInterface $user
 *   User entity of which you want the image array.
 *
 * @return mixed
 *   Returns array or NULL.
 */
function _get_profile_image_array(EntityInterface $user) : ?array {
  if ($user->field_media->target_id == NULL) {
    return NULL;
  }

  $user_image_media = Media::load($user->field_media->target_id);
  $user_image_media_fid = $user_image_media->getSource()
    ->getSourceFieldValue($user_image_media);
  $user_image_file = File::load($user_image_media_fid);

  return [
    'src' => $user_image_file->createFileUrl(),
    'alt' => $user_image_media->oe_media_image->alt,
  ];

}
